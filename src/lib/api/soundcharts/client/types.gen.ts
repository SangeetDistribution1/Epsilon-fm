// This file is auto-generated by @hey-api/openapi-ts

export type AlbumResponse = {
	type?: string;
	object?: Album;
	errors?: Array<Error>;
};

export type AlbumResponse2 = {
	type?: string;
	object?: Album2;
	errors?: Array<Error>;
};

export type AlbumResponse3 = {
	type?: string;
	object?: Album3;
	errors?: Array<Error>;
};

export type AlbumIdentifierCollectionResponse = {
	related?: AlbumLight;
	items?: Array<Identifier>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumTrackCollectionResponse = {
	related?: AlbumLight2;
	items?: Array<AlbumTrack>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumTrackCollectionResponse2 = {
	related?: AlbumLight;
	items?: Array<AlbumTrack>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type RankCollectionResponse = {
	related?: AlbumLight2;
	items?: Array<Rank>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type RankCollectionResponse2 = {
	related?: AlbumLight;
	items?: Array<Rank>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ArtistResponse = {
	type?: string;
	object?: Artist;
	errors?: Array<Error>;
};

export type ArtistResponse2 = {
	type?: string;
	object?: Artist2;
	errors?: Array<Error>;
};

export type ArtistCollectionResponse = {
	items?: Array<ArtistLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ArtistIdentifierCollectionResponse = {
	related?: ArtistLight;
	items?: Array<Identifier>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type SongCollectionResponse = {
	related?: ArtistLight;
	items?: Array<SongLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type SongCollectionResponse2 = {
	related?: ArtistLight;
	items?: Array<SongLightReleaseDate>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumCollectionResponse = {
	related?: ArtistLight;
	items?: Array<AlbumLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumCollectionResponse2 = {
	related?: ArtistLight;
	items?: Array<AlbumLightReleaseDate>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumCollectionResponse3 = {
	related?: ArtistLight;
	items?: Array<AlbumLight2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumCollectionResponse4 = {
	related?: ArtistLight;
	items?: Array<TypedAlbumLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AudiencePlotCollectionResponse = {
	related?: SocialAccount;
	items?: Array<AudiencePlot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type SocialPlotCollectionResponse = {
	related?: SocialAccount;
	items?: Array<SocialPlot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type GlobalAudiencePlotCollectionResponse = {
	related?: SocialAccount;
	items?: Array<Plot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type StreamingPlotCollectionResponse = {
	related?: SocialAccount;
	items?: Array<StreamingPlot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type RetentionPlotCollectionResponse = {
	related?: StreamingAccount;
	items?: Array<RetentionPlot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PopularityPlotCollectionResponse = {
	related?: StreamingAccount;
	items?: Array<Plot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AudienceReportResponse = {
	type?: string;
	object?: Report;
	errors?: Array<Error>;
};

export type AudienceReportDateCollectionResponse = {
	related?: SocialAccount;
	items?: Date;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type RankCollectionResponse3 = {
	related?: ArtistLight;
	items?: Array<Rank2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumRankCollectionResponse = {
	related?: ArtistLight;
	items?: Array<AlbumRank>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumRankCollectionResponse2 = {
	related?: ArtistLight;
	items?: Array<AlbumRank2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TrackCollectionResponse = {
	related?: ArtistLight;
	items?: Array<Track>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TrackCollectionResponse2 = {
	related?: ArtistLight;
	items?: Array<Track2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type BroadcastCollectionResponse = {
	related?: SongLight;
	items?: Array<Broadcast>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type EventCollectionResponse = {
	related?: EventAccount;
	items?: Array<Event>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TopArtistCollectionResponse = {
	related?: Array<TopRelated>;
	items?: Array<MetricArtist>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TopSongCollectionResponse = {
	related?: Array<TopRelated>;
	items?: Array<MetricSong>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TopBroadcastCollectionResponse = {
	related?: Array<TopRelated>;
	items?: Array<MetricBroadcast>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ChartCollectionResponse = {
	items?: Array<ChartLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ChartSongRankCollectionResponse = {
	related?: Ranking;
	items?: Array<SongRank>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ChartSongRankCollectionResponse2 = {
	related?: Ranking2;
	items?: Array<SongRank2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AvailableRankingCollectionResponse = {
	related?: ChartLight;
	items?: Array<Date>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ChartAlbumRankCollectionResponse = {
	related?: Ranking;
	items?: Array<AlbumRank3>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ChartAlbumRankCollectionResponse2 = {
	related?: Ranking;
	items?: Array<AlbumRank4>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TiktokMusicRankCollectionResponse = {
	related?: TiktokRanking;
	items?: Array<TiktokMusicRank>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AvailableTiktokMusicRankingCollectionResponse = {
	related?: TiktokChart;
	items?: Array<Date>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ArtistIdentifierCollectionResponse2 = {
	items?: Array<ArtistIdentifier>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type IdentifiersSubmittedResponse = {
	sent?: number;
	updated?: number;
	duplicate?: number;
	ignored?: number;
	errors?: Array<Error>;
};

export type SongIdentifierCollectionResponse = {
	items?: Array<SongIdentifier>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PlaylistResponse = {
	type?: string;
	object?: Playlist;
	errors?: Array<Error>;
};

export type PlaylistResponse2 = {
	type?: string;
	object?: Playlist2;
	errors?: Array<Error>;
};

export type OwnerCollectionResponse = {
	items?: Array<Owner>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PlaylistCollectionResponse = {
	related?: Owner;
	items?: Array<PlaylistLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PlaylistCollectionResponse2 = {
	related?: Owner;
	items?: Array<PlaylistLight2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PlaylistCollectionResponse3 = {
	items?: Array<PlaylistLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AudiencePlotCollectionResponse2 = {
	related?: PlaylistLight;
	items?: Array<Plot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AudiencePlotCollectionResponse3 = {
	related?: PlaylistLight2;
	items?: Array<Plot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PlaylistCollectionResponse4 = {
	items?: Array<PlaylistLight2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TrackCollectionResponse3 = {
	related?: TrackListing;
	items?: Array<Track3>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TrackCollectionResponse4 = {
	related?: TrackListing2;
	items?: Array<Track3>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TracklistingDateCollectionResponse = {
	related?: PlaylistLight;
	items?: Array<Date>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type TracklistingDateCollectionResponse2 = {
	related?: PlaylistLight2;
	items?: Array<Date>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type RadioCollectionResponse = {
	items?: Array<RadioLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type RadioCollectionResponse2 = {
	items?: Array<Radio>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type RadioCollectionResponse3 = {
	items?: Array<RadioLight2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type LiveFeedCollectionResponse = {
	related?: RadioLight;
	items?: Array<SongBroadcast>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PlatformCollectionResponse = {
	items?: Array<Platform>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type CountryCollectionResponse = {
	items?: Array<Country>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type CityCollectionResponse = {
	items?: Array<City>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type SongCollectionResponse3 = {
	items?: Array<SongLightReleaseDate>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type ResolveExternalUrlResponse = {
	type?: string;
	url?: string;
	uuid?: string;
	errors?: Array<Error>;
};

export type SongResponse = {
	type?: string;
	object?: Song;
	errors?: Array<Error>;
};

export type SongResponse2 = {
	type?: string;
	object?: Song2;
	errors?: Array<Error>;
};

export type SongResponse3 = {
	type?: string;
	object?: Song3;
	errors?: Array<Error>;
};

export type SongIdentifierCollectionResponse2 = {
	related?: SongLight;
	items?: Array<Identifier>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type AlbumCollectionResponse5 = {
	related?: SongLightReleaseDate;
	items?: Array<AlbumLightDefault>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type MusicCollectionResponse = {
	related?: SongLight;
	items?: Array<Music>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type VideoCollectionResponse = {
	related?: SongLight;
	items?: Array<Video>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type VideoCollectionResponse2 = {
	related?: SongLight;
	items?: Array<Video2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type SongPlotCollectionResponse = {
	related?: SongLight;
	items?: Array<AudiencePlot2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type SongPlotCollectionResponse2 = {
	related?: SongLight;
	items?: Array<Plot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type YoutubeViewsPlotCollectionResponse = {
	related?: SongLight;
	items?: Array<SongVideoPlot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type RankCollectionResponse4 = {
	related?: SongLight;
	items?: Array<Rank3>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PositionCollectionResponse = {
	related?: SongLight;
	items?: Array<Position>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type PositionCollectionResponse2 = {
	related?: SongLight;
	items?: Array<Position2>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type MusicResponse = {
	type?: string;
	object?: MusicFull;
	errors?: Array<Error>;
};

export type VideoVolumePlotCollectionResponse = {
	related?: Music;
	items?: Array<Plot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type VideoCollectionResponse3 = {
	related?: Music;
	items?: Array<Video3>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type UserResponse = {
	type?: string;
	object?: UserFull;
	errors?: Array<Error>;
};

export type UserVideoCollectionResponse = {
	related?: User;
	items?: Array<VideoLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type UserAudienceCollectionResponse = {
	related?: User;
	items?: Array<Plot>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type UserAudienceCollectionResponse2 = {
	related?: User;
	items?: Array<UserAudience>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type VideoResponse = {
	type?: string;
	object?: VideoFull;
	errors?: Array<Error>;
};

export type VideoAudienceCollectionResponse = {
	related?: Video3;
	items?: Array<VideoAudience>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type UrlsSubmittedResponse = {
	type?: string;
	object?: UrlsSubmitted;
	errors?: Array<Error>;
};

export type ArtistCollectionResponse2 = {
	items?: Array<ArtistLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type SongCollectionResponse4 = {
	items?: Array<SongLight>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type LabelCollectionResponse = {
	items?: Array<Label>;
	page?: OffsetPage;
	errors?: Array<Error>;
};

export type Album = {
	name?: string;
	creditName?: string;
	artists?: Array<ArtistLight>;
	upc?: string;
	releaseDate?: Date;
	label?: string;
	totalTracks?: number;
	copyright?: string;
	imageUrl?: string;
	uuid?: string;
};

export type Error = {
	/**
	 * Error key
	 */
	key?: string;
	/**
	 * Error code
	 */
	code?: number;
	/**
	 * Error message
	 */
	message?: string;
};

export type Album2 = {
	name?: string;
	creditName?: string;
	slug?: string;
	artists?: Array<ArtistLight>;
	upc?: string;
	releaseDate?: Date;
	label?: string;
	totalTracks?: number;
	copyright?: string;
};

export type Album3 = {
	name?: string;
	creditName?: string;
	slug?: string;
	artists?: Array<ArtistLight>;
	upc?: string;
	releaseDate?: Date;
	label?: string;
	totalTracks?: number;
	copyright?: string;
	imageUrl?: string;
};

export type AlbumLight = {
	name?: string;
	creditName?: string;
	slug?: string;
};

export type Identifier = {
	platformName?: string;
	platformCode?: string;
	identifier?: string;
	url?: string;
	default?: boolean;
};

export type OffsetPage = {
	/**
	 * The offset of the items returned (as set in the request or by default). Default is 0
	 */
	offset?: number;
	/**
	 * The maximum number of items in the response (as set in the request or by default).
	 */
	limit?: number;
	/**
	 * URL to the next page of items. (null if none)
	 */
	next?: string;
	/**
	 * URL to the previous page of items. (null if none)
	 */
	previous?: string;
	/**
	 * The maximum number of items available to return.
	 */
	total?: number;
};

export type AlbumLight2 = {
	name?: string;
	creditName?: string;
	releaseDate?: Date;
	uuid?: string;
};

export type AlbumTrack = {
	discNumber?: number;
	number?: number;
	song?: SongLight;
};

export type Rank = {
	chart?: Chart;
	position?: number;
	positionEvolution?: number;
	peakPosition?: number;
	peakDate?: Date;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	oldPosition?: number;
	current?: boolean;
	timeOnChart?: number;
	timeOnChartUnit?: string;
};

export type Artist = {
	uuid?: string;
	slug?: string;
	name?: string;
	appUrl?: string;
	imageUrl?: string;
	countryCode?: string;
};

export type Artist2 = {
	uuid?: string;
	slug?: string;
	name?: string;
	appUrl?: string;
	imageUrl?: string;
	countryCode?: string;
	genres?: Array<string>;
	biography?: string;
	isni?: string;
	ipi?: string;
	gender?: string;
	type?: string;
	birthDate?: Date;
};

export type ArtistLight = {
	uuid?: string;
	slug?: string;
	name?: string;
	appUrl?: string;
	imageUrl?: string;
};

export type SongLight = {
	uuid?: string;
	name?: string;
	creditName?: string;
};

export type SongLightReleaseDate = {
	uuid?: string;
	name?: string;
	creditName?: string;
	releaseDate?: Date;
};

export type AlbumLightReleaseDate = {
	name?: string;
	creditName?: string;
	slug?: string;
	releaseDate?: Date;
};

export type TypedAlbumLight = {
	name?: string;
	creditName?: string;
	releaseDate?: Date;
	uuid?: string;
	type?: string;
};

export type SocialAccount = {
	artist?: ArtistLight;
	platform?: string;
	lastCrawlDate?: Date;
};

export type AudiencePlot = {
	date?: Date;
	likeCount?: number;
	followerCount?: number;
	followingCount?: number;
	postCount?: number;
	viewCount?: number;
};

export type SocialPlot = {
	date?: Date;
	value?: number;
	cityPlots?: Array<CityPlot>;
	countryPlots?: Array<CountryPlot>;
};

export type Plot = {
	date?: Date;
	value?: number;
};

export type StreamingPlot = {
	date?: Date;
	value?: number;
	cityPlots?: Array<CityPlot>;
	countryPlots?: Array<CountryPlot>;
};

export type StreamingAccount = {
	artist?: ArtistLight;
	platform?: string;
	lastCrawlDate?: Date;
};

export type RetentionPlot = {
	date?: Date;
	conversionRate?: number;
	followers?: number;
	listeners?: number;
};

export type Report = {
	top?: Top;
	audience?: Audience;
};

export type Rank2 = {
	chart?: Chart;
	position?: number;
	positionEvolution?: number;
	peakPosition?: number;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	oldPosition?: number;
	current?: boolean;
	timeOnChart?: number;
	timeOnChartUnit?: string;
	song?: SongLight;
};

export type AlbumRank = {
	chart?: Chart;
	position?: number;
	positionEvolution?: number;
	peakPosition?: number;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	current?: boolean;
	oldPosition?: number;
	timeOnChart?: number;
	timeOnChartUnit?: string;
	album?: AlbumLight;
};

export type AlbumRank2 = {
	chart?: Chart;
	position?: number;
	positionEvolution?: number;
	peakPosition?: number;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	current?: boolean;
	oldPosition?: number;
	timeOnChart?: number;
	timeOnChartUnit?: string;
	album?: AlbumLight2;
};

export type Track = {
	playlist?: PlaylistLight;
	position?: number;
	peakPosition?: number;
	entryDate?: Date;
	positionDate?: Date;
	peakPositionDate?: Date;
	song?: SongLight;
};

export type Track2 = {
	playlist?: PlaylistLight2;
	position?: number;
	peakPosition?: number;
	entryDate?: Date;
	positionDate?: Date;
	peakPositionDate?: Date;
	song?: SongLight;
};

export type Broadcast = {
	airedAt?: Date;
	duration?: number;
	radio?: RadioLight;
};

export type EventAccount = {
	artist?: ArtistLight;
	platform?: string;
	lastCrawlDate?: Date;
};

export type Event = {
	name?: string;
	date?: Date;
	type?: string;
	venue?: Venue;
	url?: string;
};

export type TopRelated = {
	updatedAt?: Date;
};

export type MetricArtist = {
	total?: number;
	change?: number;
	percent?: number;
	artist?: ArtistLight;
};

export type MetricSong = {
	total?: number;
	change?: number;
	percent?: number;
	song?: SongLight;
};

export type MetricBroadcast = {
	total?: number;
	change?: number;
	percent?: number;
	radio?: TopRadio;
};

export type ChartLight = {
	name?: string;
	type?: string;
	slug?: string;
	platform?: string;
	frequency?: string;
	countryCode?: string;
	countryName?: string;
	cityName?: string;
	maxResultsCount?: number;
	webUrl?: string;
};

export type Ranking = {
	chart?: ChartLight;
	date?: Date;
};

export type SongRank = {
	song?: SongLight;
	position?: number;
	positionEvolution?: number;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	oldPosition?: number;
	timeOnChart?: number;
	timeOnChartUnit?: string;
};

export type Ranking2 = {
	chart?: ChartLight2;
	date?: Date;
};

export type SongRank2 = {
	song?: SongLight;
	position?: number;
	positionEvolution?: number;
	metric?: number;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	oldPosition?: number;
	timeOnChart?: number;
	timeOnChartUnit?: string;
};

export type AlbumRank3 = {
	album?: AlbumLight;
	position?: number;
	positionEvolution?: number;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	oldPosition?: number;
	timeOnChart?: number;
	timeOnChartUnit?: string;
};

export type AlbumRank4 = {
	album?: AlbumLight2;
	position?: number;
	positionEvolution?: number;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	oldPosition?: number;
	timeOnChart?: number;
	timeOnChartUnit?: string;
};

export type TiktokRanking = {
	chart?: TiktokChart;
	date?: Date;
};

export type TiktokMusicRank = {
	music?: Music;
	song?: SongLight;
	position?: number;
	positionEvolution?: number;
	peakPosition?: number;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	oldPosition?: number;
	timeOnChart?: number;
	timeOnChartUnit?: string;
	value?: number;
	oldValue?: number;
	totalValue?: number;
	oldTotalValue?: number;
};

export type TiktokChart = {
	frequency?: string;
	type?: string;
};

export type ArtistIdentifier = {
	platformCode?: string;
	identifier?: string;
	artist?: ArtistLight;
};

export type SongIdentifier = {
	platformCode?: string;
	identifier?: string;
	song?: SongLight;
};

export type Playlist = {
	uuid?: string;
	name?: string;
	identifier?: string;
	platform?: string;
	countryCode?: string;
	owner?: Owner;
	latestCrawlDate?: Date;
	latestTrackCount?: number;
	latestSubscriberCount?: number;
	type?: string;
	refreshed?: string;
	availableCountryCodes?: Array<string>;
};

export type Playlist2 = {
	uuid?: string;
	name?: string;
	identifier?: string;
	platform?: string;
	countryCode?: string;
	owner?: Owner;
	latestCrawlDate?: Date;
	latestTrackCount?: number;
	latestSubscriberCount?: number;
	type?: string;
	refreshed?: string;
	availableCountryCodes?: Array<string>;
	appUrl?: string;
	imageUrl?: string;
};

export type Owner = {
	name?: string;
	identifier?: string;
};

export type PlaylistLight = {
	uuid?: string;
	name?: string;
	identifier?: string;
	platform?: string;
	countryCode?: string;
	latestCrawlDate?: Date;
	latestTrackCount?: number;
	latestSubscriberCount?: number;
};

export type PlaylistLight2 = {
	uuid?: string;
	name?: string;
	identifier?: string;
	platform?: string;
	countryCode?: string;
	latestCrawlDate?: Date;
	latestTrackCount?: number;
	latestSubscriberCount?: number;
	type?: string;
};

export type TrackListing = {
	playlist?: PlaylistLight;
	date?: Date;
};

export type Track3 = {
	position?: number;
	song?: SongLight;
};

export type TrackListing2 = {
	playlist?: PlaylistLight2;
	date?: Date;
};

export type RadioLight = {
	/**
	 * Radio name
	 */
	name?: string;
	/**
	 * Radio slug. Used as radio identifier
	 */
	slug?: string;
	/**
	 * Radio country code, 2 letters ISO 3166-2
	 */
	countryCode?: string;
	/**
	 * Radio country name
	 */
	countryName?: string;
	/**
	 * Radio city name
	 */
	cityName?: string;
	/**
	 * Radio timezone
	 */
	timeZone?: string;
};

export type Radio = {
	/**
	 * Radio name
	 */
	name?: string;
	/**
	 * Radio slug. Used as radio identifier
	 */
	slug?: string;
	/**
	 * Radio country code, 2 letters ISO 3166-2
	 */
	countryCode?: string;
	/**
	 * Radio country name
	 */
	countryName?: string;
	/**
	 * Radio city name
	 */
	cityName?: string;
	/**
	 * Radio timezone
	 */
	timeZone?: string;
	/**
	 * Sum of followers on social platforms
	 */
	reach?: number;
};

export type RadioLight2 = {
	/**
	 * Radio name
	 */
	name?: string;
	/**
	 * Radio slug. Used as radio identifier
	 */
	slug?: string;
	/**
	 * Radio country code, 2 letters ISO 3166-2
	 */
	countryCode?: string;
	/**
	 * Radio country name
	 */
	countryName?: string;
	/**
	 * Radio city name
	 */
	cityName?: string;
	/**
	 * Radio timezone
	 */
	timeZone?: string;
	/**
	 * Sum of followers on social platforms
	 */
	reach?: number;
	/**
	 * First aired at
	 */
	firstAiredAt?: Date;
};

export type SongBroadcast = {
	song?: SongLight;
	airedAt?: Date;
	duration?: number;
};

export type Platform = {
	/**
	 * Platform name
	 */
	name?: string;
	/**
	 * Platform code
	 */
	code?: string;
};

export type Country = {
	name?: string;
	countryCode?: string;
};

export type City = {
	name?: string;
	region?: string;
	countryCode?: string;
	cityKey?: string;
};

export type Song = {
	uuid?: string;
	name?: string;
	isrc?: string;
	creditName?: string;
	artists?: Array<ArtistLight>;
	releaseDate?: Date;
	label?: string;
	copyright?: string;
	appUrl?: string;
	imageUrl?: string;
	duration?: number;
};

export type Song2 = {
	uuid?: string;
	name?: string;
	isrc?: Isrc;
	creditName?: string;
	artists?: Array<ArtistLight>;
	releaseDate?: Date;
	label?: string;
	copyright?: string;
	appUrl?: string;
	imageUrl?: string;
	duration?: number;
	genres?: Array<Genre>;
	composers?: Array<string>;
};

export type Song3 = {
	uuid?: string;
	name?: string;
	isrc?: Isrc;
	creditName?: string;
	artists?: Array<ArtistLight>;
	releaseDate?: Date;
	copyright?: string;
	appUrl?: string;
	imageUrl?: string;
	duration?: number;
	genres?: Array<Genre>;
	composers?: Array<string>;
	producers?: Array<string>;
	labels?: Array<Label2>;
	audio?: Audio;
};

export type AlbumLightDefault = {
	name?: string;
	creditName?: string;
	releaseDate?: Date;
	uuid?: string;
	default?: boolean;
	type?: string;
};

export type Music = {
	identifier?: string;
	title?: string;
	authorName?: string;
	url?: string;
	imgUrl?: string;
};

export type Video = {
	identifier?: string;
	url?: string;
};

export type Video2 = {
	identifier?: string;
	url?: string;
	name?: string;
	creditName?: string;
};

export type AudiencePlot2 = {
	date?: Date;
	plots?: Array<Plot2>;
};

export type SongVideoPlot = {
	date?: Date;
	videoPlots?: Array<Plot>;
};

export type Rank3 = {
	chart?: Chart;
	position?: number;
	positionEvolution?: number;
	peakPosition?: number;
	peakDate?: Date;
	entryState?: string;
	entryDate?: Date;
	rankDate?: Date;
	oldPosition?: number;
	current?: boolean;
	timeOnChart?: number;
	timeOnChartUnit?: string;
};

export type Position = {
	playlist?: PlaylistLight;
	position?: number;
	peakPosition?: number;
	entryDate?: Date;
	positionDate?: Date;
	peakPositionDate?: Date;
};

export type Position2 = {
	playlist?: PlaylistLight2;
	position?: number;
	peakPosition?: number;
	entryDate?: Date;
	positionDate?: Date;
	peakPositionDate?: Date;
};

export type MusicFull = {
	identifier?: string;
	title?: string;
	authorName?: string;
	url?: string;
	imgUrl?: string;
	song?: SongLight;
	latestCrawlDate?: Date;
	firstCrawlDate?: Date;
};

export type Video3 = {
	identifier?: string;
	createdAt?: Date;
	latestAudience?: VideoAudience;
	user?: User;
};

export type UserFull = {
	identifier?: string;
	username?: string;
	latestFollowerCount?: number;
	latestCrawlDate?: Date;
	firstCrawlDate?: Date;
};

export type User = {
	identifier?: string;
	username?: string;
	lastFollowerCount?: number;
};

export type VideoLight = {
	identifier?: string;
	createdAt?: Date;
	latestAudience?: VideoAudience;
};

export type UserAudience = {
	date?: Date;
	likeCount?: number;
	followerCount?: number;
	followingCount?: number;
};

export type VideoFull = {
	identifier?: string;
	createdAt?: Date;
	latestAudience?: VideoAudience;
	user?: User;
	latestCrawlDate?: Date;
	firstCrawlDate?: Date;
};

export type VideoAudience = {
	date?: Date;
	commentCount?: number;
	likeCount?: number;
	playCount?: number;
	shareCount?: number;
};

export type UrlsSubmitted = {
	invalidUrls?: Array<string>;
	validUrls?: Array<string>;
};

export type Label = {
	label?: string;
};

export type Chart = {
	name?: string;
	type?: string;
	slug?: string;
	platform?: string;
	frequency?: string;
	countryCode?: string;
	countryName?: string;
	cityName?: string;
	maxResultsCount?: number;
	webUrl?: string;
};

export type CityPlot = {
	date?: Date;
	value?: number;
	countryName?: string;
	countryCode?: string;
	region?: string;
	cityName?: string;
};

export type CountryPlot = {
	date?: Date;
	value?: number;
	countryName?: string;
	countryCode?: string;
};

export type Top = {
	mentions?: Array<CodeWeight>;
	hashtags?: Array<CodeWeight>;
	posts?: Array<Post>;
	reels?: Array<Reel>;
};

export type Audience = {
	stats?: Stats;
	audienceLike?: AudienceDetail;
	audienceFollower?: AudienceDetail;
	brandsAffinity?: Array<string>;
	interests?: Array<string>;
	relevantTags?: Array<RelevantTag>;
};

export type Venue = {
	name?: string;
	cityName?: string;
	countryCode?: string;
	countryName?: string;
	capacity?: string;
	popularity?: string;
};

export type TopRadio = {
	/**
	 * Radio name
	 */
	name?: string;
	/**
	 * Radio slug. Used as radio identifier
	 */
	slug?: string;
	/**
	 * Radio country code, 2 letters ISO 3166-2
	 */
	countryCode?: string;
	/**
	 * Radio country name
	 */
	countryName?: string;
	/**
	 * Radio city name
	 */
	cityName?: string;
	/**
	 * Radio timezone
	 */
	timeZone?: string;
	/**
	 * Sum of followers on social platforms
	 */
	reach?: number;
	genres?: Array<string>;
	/**
	 * Frontline, catalog, mixed
	 */
	trackAge?: string;
};

export type ChartLight2 = {
	name?: string;
	type?: string;
	slug?: string;
	platform?: string;
	frequency?: string;
	countryCode?: string;
	countryName?: string;
	cityName?: string;
	maxResultsCount?: number;
	webUrl?: string;
	metric?: Metric;
};

export type Isrc = {
	value?: string;
	countryCode?: string;
	countryName?: string;
};

export type Genre = {
	root?: string;
	sub?: Array<string>;
};

export type Label2 = {
	name?: string;
	type?: string;
};

export type Audio = {
	danceability?: number;
	energy?: number;
	instrumentalness?: number;
	key?: number;
	liveness?: number;
	loudness?: number;
	mode?: number;
	speechiness?: number;
	tempo?: number;
	timeSignature?: number;
	valence?: number;
};

export type Plot2 = {
	identifier?: string;
	value?: number;
};

export type CodeWeight = {
	code?: string;
	weight?: number;
};

export type Post = {
	likeCount?: number;
	commentCount?: number;
	date?: Date;
	imageUrl?: string;
	url?: string;
	text?: string;
	mentions?: Array<string>;
};

export type Reel = {
	date?: Date;
	url?: string;
	text?: string;
	likeCount?: number;
	commentCount?: number;
	playCount?: number;
	mentions?: Array<string>;
};

export type Stats = {
	followerCount?: number;
	postCount?: number;
	viewCount?: number;
	engagementCount?: number;
	averageLikesPerPost?: number;
	averageCommentsPerPost?: number;
	averageViewsPerPost?: number;
	engagementRate?: number;
	averageReelsPlays?: number;
};

export type AudienceDetail = {
	genders?: Array<CodeWeight>;
	ages?: Array<CodeWeight>;
	gendersPerAge?: Array<GenderPerAge>;
	ethnicities?: Array<CodeWeight>;
	languages?: Array<CodeWeight>;
	countries?: Array<CountryWeight>;
	cities?: Array<CityWeight>;
	notableUsers?: Array<User2>;
	types?: Array<CodeWeight>;
	credibility?: number;
	credibilityClass?: string;
	reachabilities?: Array<CodeWeight>;
	notableUsersRatio?: number;
	lookalikes?: Array<Lookalike>;
	interests?: Array<AffinityWeight>;
	brandAffinities?: Array<AffinityWeight>;
};

export type RelevantTag = {
	name?: string;
	distance?: number;
	freq?: number;
};

export type Metric = {
	type?: string;
	description?: string;
};

export type GenderPerAge = {
	code?: string;
	maleWeight?: number;
	femaleWeight?: number;
};

export type CountryWeight = {
	weight?: number;
	countryName?: string;
	countryCode?: string;
};

export type CityWeight = {
	weight?: number;
	countryName?: string;
	countryCode?: string;
	region?: string;
	cityName?: string;
};

export type User2 = {
	username?: string;
	fullName?: string;
	followerCount?: number;
	engagementCount?: number;
	url?: string;
	imageUrl?: string;
	countryCode?: string;
	countryName?: string;
};

export type Lookalike = {
	username?: string;
	fullName?: string;
	followerCount?: number;
	engagementCount?: number;
	url?: string;
	imageUrl?: string;
	countryCode?: string;
	countryName?: string;
	score?: number;
};

export type AffinityWeight = {
	name?: string;
	weight?: number;
	affinity?: number;
};

export type GetApiV2AlbumByUuidByUuidData = {
	path: {
		/**
		 * An album UUID
		 */
		uuid: string;
	};
};

export type GetApiV2AlbumByUuidByUuidResponse = AlbumResponse;

export type GetApiV2AlbumByUuidByUuidError = unknown;

export type GetApiV2AlbumBySlugBySlugData = {
	path: {
		/**
		 * An album slug
		 */
		slug: string;
	};
};

export type GetApiV2AlbumBySlugBySlugResponse = AlbumResponse2;

export type GetApiV2AlbumBySlugBySlugError = unknown;

export type GetApiV215AlbumBySlugBySlugData = {
	path: {
		/**
		 * An album slug
		 */
		slug: string;
	};
};

export type GetApiV215AlbumBySlugBySlugResponse = AlbumResponse2;

export type GetApiV215AlbumBySlugBySlugError = unknown;

export type GetApiV2AlbumByUpcByUpcData = {
	path: {
		/**
		 * An UPC code
		 */
		upc: string;
	};
};

export type GetApiV2AlbumByUpcByUpcResponse = AlbumResponse2;

export type GetApiV2AlbumByUpcByUpcError = unknown;

export type GetApiV215AlbumByUpcByUpcData = {
	path: {
		/**
		 * An UPC code
		 */
		upc: string;
	};
};

export type GetApiV215AlbumByUpcByUpcResponse = AlbumResponse3;

export type GetApiV215AlbumByUpcByUpcError = unknown;

export type GetApiV226AlbumByUpcByUpcData = {
	path: {
		/**
		 * An UPC code
		 */
		upc: string;
	};
};

export type GetApiV226AlbumByUpcByUpcResponse = AlbumResponse;

export type GetApiV226AlbumByUpcByUpcError = unknown;

export type GetApiV2AlbumByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * A album platform Identifier.
		 */
		identifier: string;
		/**
		 * A platform code
		 */
		platform: string;
	};
};

export type GetApiV2AlbumByPlatformByPlatformByIdentifierResponse = AlbumResponse2;

export type GetApiV2AlbumByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV215AlbumByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * A album platform Identifier.
		 */
		identifier: string;
		/**
		 * A platform code
		 */
		platform: string;
	};
};

export type GetApiV215AlbumByPlatformByPlatformByIdentifierResponse = AlbumResponse3;

export type GetApiV215AlbumByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV226AlbumByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * A album platform Identifier.
		 */
		identifier: string;
		/**
		 * A platform code
		 */
		platform: string;
	};
};

export type GetApiV226AlbumByPlatformByPlatformByIdentifierResponse = AlbumResponse;

export type GetApiV226AlbumByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV226AlbumByUuidIdentifiersData = {
	path: {
		/**
		 * An album UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV226AlbumByUuidIdentifiersResponse = AlbumIdentifierCollectionResponse;

export type GetApiV226AlbumByUuidIdentifiersError = unknown;

export type GetApiV2AlbumBySlugIdentifiersData = {
	path: {
		/**
		 * An album slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2AlbumBySlugIdentifiersResponse = AlbumIdentifierCollectionResponse;

export type GetApiV2AlbumBySlugIdentifiersError = unknown;

export type GetApiV226AlbumByUuidTracksData = {
	path: {
		/**
		 * An album UUID
		 */
		uuid: string;
	};
};

export type GetApiV226AlbumByUuidTracksResponse = AlbumTrackCollectionResponse;

export type GetApiV226AlbumByUuidTracksError = unknown;

export type GetApiV2AlbumBySlugTracksData = {
	path: {
		/**
		 * An album slug
		 */
		slug: string;
	};
};

export type GetApiV2AlbumBySlugTracksResponse = AlbumTrackCollectionResponse2;

export type GetApiV2AlbumBySlugTracksError = unknown;

export type GetApiV226AlbumByUuidChartsRanksByPlatformData = {
	path: {
		/**
		 * A album chart platform code
		 */
		platform: string;
		/**
		 * An album UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Get only the current positions in charts with 1, or the current and past positions with 0.
		 */
		currentOnly?: number;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, rankDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV226AlbumByUuidChartsRanksByPlatformResponse = RankCollectionResponse;

export type GetApiV226AlbumByUuidChartsRanksByPlatformError = unknown;

export type GetApiV2AlbumBySlugChartsRanksByPlatformData = {
	path: {
		/**
		 * A album chart platform code
		 */
		platform: string;
		/**
		 * An album slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Get only the current positions in charts with 1, or the current and past positions with 0.
		 */
		currentOnly?: number;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, rankDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV2AlbumBySlugChartsRanksByPlatformResponse = RankCollectionResponse2;

export type GetApiV2AlbumBySlugChartsRanksByPlatformError = unknown;

export type GetApiV2ArtistByUuidData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
};

export type GetApiV2ArtistByUuidResponse = ArtistResponse;

export type GetApiV2ArtistByUuidError = unknown;

export type GetApiV29ArtistByUuidData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
};

export type GetApiV29ArtistByUuidResponse = ArtistResponse2;

export type GetApiV29ArtistByUuidError = unknown;

export type GetApiV2ArtistByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * An artist platform identifier
		 */
		identifier: string;
		/**
		 * A platform code
		 */
		platform: string;
	};
};

export type GetApiV2ArtistByPlatformByPlatformByIdentifierResponse = ArtistResponse;

export type GetApiV2ArtistByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV29ArtistByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * An artist platform identifier
		 */
		identifier: string;
		/**
		 * A platform code
		 */
		platform: string;
	};
};

export type GetApiV29ArtistByPlatformByPlatformByIdentifierResponse = ArtistResponse2;

export type GetApiV29ArtistByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV2ArtistByCountryByCountryCodeData = {
	path: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ArtistByCountryByCountryCodeResponse = ArtistCollectionResponse;

export type GetApiV2ArtistByCountryByCountryCodeError = unknown;

export type GetApiV2ArtistByUuidIdentifiersData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ArtistByUuidIdentifiersResponse = ArtistIdentifierCollectionResponse;

export type GetApiV2ArtistByUuidIdentifiersError = unknown;

export type GetApiV2ArtistByUuidSongsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : name, releaseDate, spotifyStream, shazamCount, youtubeViews, spotifyPopularity
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV2ArtistByUuidSongsResponse = SongCollectionResponse;

export type GetApiV2ArtistByUuidSongsError = unknown;

export type GetApiV221ArtistByUuidSongsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : name, releaseDate, spotifyStream, shazamCount, youtubeViews, spotifyPopularity
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV221ArtistByUuidSongsResponse = SongCollectionResponse2;

export type GetApiV221ArtistByUuidSongsError = unknown;

export type GetApiV2ArtistByUuidAlbumsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : title, releaseDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV2ArtistByUuidAlbumsResponse = AlbumCollectionResponse;

export type GetApiV2ArtistByUuidAlbumsError = unknown;

export type GetApiV218ArtistByUuidAlbumsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : title, releaseDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV218ArtistByUuidAlbumsResponse = AlbumCollectionResponse2;

export type GetApiV218ArtistByUuidAlbumsError = unknown;

export type GetApiV226ArtistByUuidAlbumsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : title, releaseDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV226ArtistByUuidAlbumsResponse = AlbumCollectionResponse3;

export type GetApiV226ArtistByUuidAlbumsError = unknown;

export type GetApiV234ArtistByUuidAlbumsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : title, releaseDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
		/**
		 * Filter result album list. Available values are : all, album, single, compil
		 */
		type?: string;
	};
};

export type GetApiV234ArtistByUuidAlbumsResponse = AlbumCollectionResponse4;

export type GetApiV234ArtistByUuidAlbumsError = unknown;

export type GetApiV2ArtistByUuidRelatedData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ArtistByUuidRelatedResponse = ArtistCollectionResponse;

export type GetApiV2ArtistByUuidRelatedError = unknown;

export type GetApiV2ArtistByUuidAudienceByPlatformData = {
	path: {
		/**
		 * A social platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2ArtistByUuidAudienceByPlatformResponse = AudiencePlotCollectionResponse;

export type GetApiV2ArtistByUuidAudienceByPlatformError = unknown;

export type GetApiV2ArtistByUuidSocialByPlatformFollowersByYearByMonthData = {
	path: {
		/**
		 * Month MM format
		 */
		month: number;
		/**
		 * A social platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
		/**
		 * Year YYYY format
		 */
		year: number;
	};
};

export type GetApiV2ArtistByUuidSocialByPlatformFollowersByYearByMonthResponse =
	SocialPlotCollectionResponse;

export type GetApiV2ArtistByUuidSocialByPlatformFollowersByYearByMonthError = unknown;

export type GetApiV2ArtistByUuidSocialByPlatformData = {
	path: {
		/**
		 * A social platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2ArtistByUuidSocialByPlatformResponse = SocialPlotCollectionResponse;

export type GetApiV2ArtistByUuidSocialByPlatformError = unknown;

export type GetApiV2ArtistByUuidStreamingByPlatformListeningData = {
	path: {
		/**
		 * platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2ArtistByUuidStreamingByPlatformListeningResponse =
	GlobalAudiencePlotCollectionResponse;

export type GetApiV2ArtistByUuidStreamingByPlatformListeningError = unknown;

export type GetApiV2ArtistByUuidStreamingSpotifyListenersData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
};

export type GetApiV2ArtistByUuidStreamingSpotifyListenersResponse = StreamingPlotCollectionResponse;

export type GetApiV2ArtistByUuidStreamingSpotifyListenersError = unknown;

export type GetApiV2ArtistByUuidStreamingSpotifyListenersByYearByMonthData = {
	path: {
		/**
		 * Month MM format
		 */
		month: number;
		/**
		 * An artist UUID
		 */
		uuid: string;
		/**
		 * Year YYYY format
		 */
		year: number;
	};
};

export type GetApiV2ArtistByUuidStreamingSpotifyListenersByYearByMonthResponse =
	StreamingPlotCollectionResponse;

export type GetApiV2ArtistByUuidStreamingSpotifyListenersByYearByMonthError = unknown;

export type GetApiV2ArtistByUuidStreamingYoutubeViewsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
};

export type GetApiV2ArtistByUuidStreamingYoutubeViewsResponse = StreamingPlotCollectionResponse;

export type GetApiV2ArtistByUuidStreamingYoutubeViewsError = unknown;

export type GetApiV2ArtistByUuidStreamingYoutubeViewsByYearByMonthData = {
	path: {
		/**
		 * Month MM format
		 */
		month: number;
		/**
		 * An artist UUID
		 */
		uuid: string;
		/**
		 * Year YYYY format
		 */
		year: number;
	};
};

export type GetApiV2ArtistByUuidStreamingYoutubeViewsByYearByMonthResponse =
	StreamingPlotCollectionResponse;

export type GetApiV2ArtistByUuidStreamingYoutubeViewsByYearByMonthError = unknown;

export type GetApiV2ArtistByUuidByPlatformRetentionData = {
	path: {
		/**
		 * A social platform code (spotify, jiosaavn, anghami, youtube)
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2ArtistByUuidByPlatformRetentionResponse = RetentionPlotCollectionResponse;

export type GetApiV2ArtistByUuidByPlatformRetentionError = unknown;

export type GetApiV2ArtistByUuidSpotifyPopularityData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2ArtistByUuidSpotifyPopularityResponse = PopularityPlotCollectionResponse;

export type GetApiV2ArtistByUuidSpotifyPopularityError = unknown;

export type GetApiV2ArtistByUuidAudienceByPlatformReportLatestData = {
	path: {
		/**
		 * A social platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
};

export type GetApiV2ArtistByUuidAudienceByPlatformReportLatestResponse = AudienceReportResponse;

export type GetApiV2ArtistByUuidAudienceByPlatformReportLatestError = unknown;

export type GetApiV2ArtistByUuidAudienceByPlatformReportAvailableDatesData = {
	path: {
		/**
		 * A social platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2ArtistByUuidAudienceByPlatformReportAvailableDatesResponse =
	AudienceReportDateCollectionResponse;

export type GetApiV2ArtistByUuidAudienceByPlatformReportAvailableDatesError = unknown;

export type GetApiV2ArtistByUuidAudienceByPlatformReportByDateData = {
	path: {
		/**
		 * A report date (YYYY-MM-DD)
		 */
		date: string;
		/**
		 * A social platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
};

export type GetApiV2ArtistByUuidAudienceByPlatformReportByDateResponse = AudienceReportResponse;

export type GetApiV2ArtistByUuidAudienceByPlatformReportByDateError = unknown;

export type GetApiV2ArtistByUuidChartsSongRanksByPlatformData = {
	path: {
		/**
		 * An Artist Chart platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Get only the current positions in charts with 1, or the current and past positions with 0.
		 */
		currentOnly?: number;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, rankDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV2ArtistByUuidChartsSongRanksByPlatformResponse = RankCollectionResponse3;

export type GetApiV2ArtistByUuidChartsSongRanksByPlatformError = unknown;

export type GetApiV2ArtistByUuidChartsAlbumRanksByPlatformData = {
	path: {
		/**
		 * An Artist Chart album platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Get only the current positions in charts with 1, or the current and past positions with 0.
		 */
		currentOnly?: number;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, rankDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV2ArtistByUuidChartsAlbumRanksByPlatformResponse = AlbumRankCollectionResponse;

export type GetApiV2ArtistByUuidChartsAlbumRanksByPlatformError = unknown;

export type GetApiV228ArtistByUuidChartsAlbumRanksByPlatformData = {
	path: {
		/**
		 * An Artist Chart album platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Get only the current positions in charts with 1, or the current and past positions with 0.
		 */
		currentOnly?: number;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, rankDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV228ArtistByUuidChartsAlbumRanksByPlatformResponse = AlbumRankCollectionResponse2;

export type GetApiV228ArtistByUuidChartsAlbumRanksByPlatformError = unknown;

export type GetApiV2ArtistByUuidPlaylistCurrentByPlatformData = {
	path: {
		/**
		 * A playlist platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, positionDate, entryDate, subscriberCount
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
		/**
		 * A playlist type. Available values are : 'all' or one of editorial, algorithmic, algotorial, major, charts, curators_listeners, radios, this_is
		 */
		type?: string;
	};
};

export type GetApiV2ArtistByUuidPlaylistCurrentByPlatformResponse = TrackCollectionResponse;

export type GetApiV2ArtistByUuidPlaylistCurrentByPlatformError = unknown;

export type GetApiV220ArtistByUuidPlaylistCurrentByPlatformData = {
	path: {
		/**
		 * A playlist platform code
		 */
		platform: string;
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, positionDate, entryDate, subscriberCount
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
		/**
		 * A playlist type. Available values are : 'all' or one of editorial, algorithmic, algotorial, major, charts, curators_listeners, radios, this_is
		 */
		type?: string;
	};
};

export type GetApiV220ArtistByUuidPlaylistCurrentByPlatformResponse = TrackCollectionResponse2;

export type GetApiV220ArtistByUuidPlaylistCurrentByPlatformError = unknown;

export type GetApiV2ArtistByUuidBroadcastsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional country code filter (2 letters ISO 3166-2, full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode?: string;
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Optional radio slugs filter (comma separated)
		 */
		radioSlugs?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2ArtistByUuidBroadcastsResponse = BroadcastCollectionResponse;

export type GetApiV2ArtistByUuidBroadcastsError = unknown;

export type GetApiV2ArtistByUuidSongkickEventsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * A period type (Available values are : all, past, upcoming)
		 */
		periodType?: string;
		/**
		 * Sort criteria. Available values are : date
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
		/**
		 * A period type (Available values are : all, concert, festival)
		 */
		type?: string;
	};
};

export type GetApiV2ArtistByUuidSongkickEventsResponse = EventCollectionResponse;

export type GetApiV2ArtistByUuidSongkickEventsError = unknown;

export type GetApiV219ArtistByUuidSongkickEventsData = {
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * A period type (Available values are : all, past, upcoming)
		 */
		periodType?: string;
		/**
		 * Sort criteria. Available values are : date
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
		/**
		 * A period type (Available values are : all, concert, festival)
		 */
		type?: string;
	};
};

export type GetApiV219ArtistByUuidSongkickEventsResponse = EventCollectionResponse;

export type GetApiV219ArtistByUuidSongkickEventsError = unknown;

export type PostApiV2ArtistByUuidSourcesAddData = {
	/**
	 * JSON Payload
	 */
	body: {
		urls?: Array<string>;
	};
	path: {
		/**
		 * An artist UUID
		 */
		uuid: string;
	};
};

export type PostApiV2ArtistByUuidSourcesAddResponse = ArtistResponse;

export type PostApiV2ArtistByUuidSourcesAddError = unknown;

export type GetApiV2TopArtistByPlatformByMetricTypeData = {
	path: {
		/**
		 * followers, monthly_listeners, views, fans, likes, favorites, subscribers, plays
		 */
		metricType: string;
		/**
		 * platform code
		 */
		platform: string;
	};
	query: {
		/**
		 * Artist nationality (Country code of 2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		artistCountryCode?: string;
		/**
		 * Change percentage audience (max value)
		 */
		maxChange?: number;
		/**
		 * Total audience (max value)
		 */
		maxValue?: number;
		/**
		 * Change percentage audience (min value)
		 */
		minChange?: number;
		/**
		 * Total audience (min value)
		 */
		minValue?: number;
		/**
		 * week, month, quarter
		 */
		period: string;
		/**
		 * total, change, percent
		 */
		sortBy: string;
		/**
		 * Page token
		 */
		token?: string;
	};
};

export type GetApiV2TopArtistByPlatformByMetricTypeResponse = TopArtistCollectionResponse;

export type GetApiV2TopArtistByPlatformByMetricTypeError = unknown;

export type GetApiV2TopArtistCountryByCountryCodeByPlatformByMetricTypeData = {
	path: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode: string;
		/**
		 * followers, views, subscribers, plays
		 */
		metricType: string;
		/**
		 * platform code
		 */
		platform: string;
	};
	query: {
		/**
		 * Artist nationality (Country code of 2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		artistCountryCode?: string;
		/**
		 * Change percentage audience (max value)
		 */
		maxChange?: number;
		/**
		 * Total audience (max value)
		 */
		maxValue?: number;
		/**
		 * Change percentage audience (min value)
		 */
		minChange?: number;
		/**
		 * Total audience (min value)
		 */
		minValue?: number;
		/**
		 * month, quarter
		 */
		period: string;
		/**
		 * total, change, percent
		 */
		sortBy: string;
		/**
		 * Page token
		 */
		token?: string;
	};
};

export type GetApiV2TopArtistCountryByCountryCodeByPlatformByMetricTypeResponse =
	TopArtistCollectionResponse;

export type GetApiV2TopArtistCountryByCountryCodeByPlatformByMetricTypeError = unknown;

export type GetApiV2TopArtistCityByCityKeyByPlatformByMetricTypeData = {
	path: {
		/**
		 * city key
		 */
		cityKey: string;
		/**
		 * followers, views, monthly_listeners
		 */
		metricType: string;
		/**
		 * platform code
		 */
		platform: string;
	};
	query: {
		/**
		 * Artist nationality (Country code of 2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		artistCountryCode?: string;
		/**
		 * Change percentage audience (max value)
		 */
		maxChange?: number;
		/**
		 * Total audience (max value)
		 */
		maxValue?: number;
		/**
		 * Change percentage audience (min value)
		 */
		minChange?: number;
		/**
		 * Total audience (min value)
		 */
		minValue?: number;
		/**
		 * month, quarter
		 */
		period: string;
		/**
		 * total, change, percent
		 */
		sortBy: string;
		/**
		 * Page token
		 */
		token?: string;
	};
};

export type GetApiV2TopArtistCityByCityKeyByPlatformByMetricTypeResponse =
	TopArtistCollectionResponse;

export type GetApiV2TopArtistCityByCityKeyByPlatformByMetricTypeError = unknown;

export type GetApiV2TopSongByPlatformByMetricTypeData = {
	path: {
		/**
		 * streams, views, videos created, favorites, popularity, plays, likes
		 */
		metricType: string;
		/**
		 * platform code
		 */
		platform: string;
	};
	query: {
		/**
		 * Change percentage audience (max value)
		 */
		maxChange?: number;
		/**
		 * Total audience (max value)
		 */
		maxValue?: number;
		/**
		 * Change percentage audience (min value)
		 */
		minChange?: number;
		/**
		 * Total audience (min value)
		 */
		minValue?: number;
		/**
		 * week, month, quarter
		 */
		period: string;
		/**
		 * Song nationality (Country code of 2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		songCountryCode?: string;
		/**
		 * total, change, percent
		 */
		sortBy: string;
		/**
		 * Page token
		 */
		token?: string;
	};
};

export type GetApiV2TopSongByPlatformByMetricTypeResponse = TopSongCollectionResponse;

export type GetApiV2TopSongByPlatformByMetricTypeError = unknown;

export type GetApiV2TopRadioByPlatformByMetricTypeData = {
	path: {
		/**
		 * fans, followers, reach
		 */
		metricType: string;
		/**
		 * platform code
		 */
		platform: string;
	};
	query: {
		/**
		 * Change percentage audience (max value)
		 */
		maxChange?: number;
		/**
		 * Total audience (max value)
		 */
		maxValue?: number;
		/**
		 * Change percentage audience (min value)
		 */
		minChange?: number;
		/**
		 * Total audience (min value)
		 */
		minValue?: number;
		/**
		 * month, quarter
		 */
		period: string;
		/**
		 * Radio nationality (Country code of 2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		radioCountryCode?: string;
		/**
		 * total, change, percent
		 */
		sortBy: string;
		/**
		 * Page token
		 */
		token?: string;
	};
};

export type GetApiV2TopRadioByPlatformByMetricTypeResponse = TopBroadcastCollectionResponse;

export type GetApiV2TopRadioByPlatformByMetricTypeError = unknown;

export type GetApiV2ChartSongByPlatformByPlatformData = {
	path: {
		/**
		 * A song chart platform code
		 */
		platform: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartSongByPlatformByPlatformResponse = ChartCollectionResponse;

export type GetApiV2ChartSongByPlatformByPlatformError = unknown;

export type GetApiV2ChartSongBySlugRankingLatestData = {
	path: {
		/**
		 * A song chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartSongBySlugRankingLatestResponse = ChartSongRankCollectionResponse;

export type GetApiV2ChartSongBySlugRankingLatestError = unknown;

export type GetApiV214ChartSongBySlugRankingLatestData = {
	path: {
		/**
		 * A song chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV214ChartSongBySlugRankingLatestResponse = ChartSongRankCollectionResponse2;

export type GetApiV214ChartSongBySlugRankingLatestError = unknown;

export type GetApiV2ChartSongBySlugAvailableRankingsData = {
	path: {
		/**
		 * A song chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartSongBySlugAvailableRankingsResponse = AvailableRankingCollectionResponse;

export type GetApiV2ChartSongBySlugAvailableRankingsError = unknown;

export type GetApiV2ChartSongBySlugRankingByDatetimeData = {
	path: {
		/**
		 * A ranking date (ATOM format)
		 */
		datetime: string;
		/**
		 * A chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartSongBySlugRankingByDatetimeResponse = ChartSongRankCollectionResponse;

export type GetApiV2ChartSongBySlugRankingByDatetimeError = unknown;

export type GetApiV214ChartSongBySlugRankingByDatetimeData = {
	path: {
		/**
		 * A ranking date (ATOM format)
		 */
		datetime: string;
		/**
		 * A chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV214ChartSongBySlugRankingByDatetimeResponse = ChartSongRankCollectionResponse2;

export type GetApiV214ChartSongBySlugRankingByDatetimeError = unknown;

export type GetApiV2ChartAlbumByPlatformByPlatformData = {
	path: {
		/**
		 * An album chart platform code
		 */
		platform: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartAlbumByPlatformByPlatformResponse = ChartCollectionResponse;

export type GetApiV2ChartAlbumByPlatformByPlatformError = unknown;

export type GetApiV2ChartAlbumBySlugRankingLatestData = {
	path: {
		/**
		 * A chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartAlbumBySlugRankingLatestResponse = ChartAlbumRankCollectionResponse;

export type GetApiV2ChartAlbumBySlugRankingLatestError = unknown;

export type GetApiV226ChartAlbumBySlugRankingLatestData = {
	path: {
		/**
		 * A chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV226ChartAlbumBySlugRankingLatestResponse = ChartAlbumRankCollectionResponse2;

export type GetApiV226ChartAlbumBySlugRankingLatestError = unknown;

export type GetApiV2ChartAlbumBySlugAvailableRankingsData = {
	path: {
		/**
		 * A chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartAlbumBySlugAvailableRankingsResponse = AvailableRankingCollectionResponse;

export type GetApiV2ChartAlbumBySlugAvailableRankingsError = unknown;

export type GetApiV2ChartAlbumBySlugRankingByDatetimeData = {
	path: {
		/**
		 * A ranking date (ATOM format)
		 */
		datetime: string;
		/**
		 * A chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartAlbumBySlugRankingByDatetimeResponse = ChartAlbumRankCollectionResponse;

export type GetApiV2ChartAlbumBySlugRankingByDatetimeError = unknown;

export type GetApiV226ChartAlbumBySlugRankingByDatetimeData = {
	path: {
		/**
		 * A ranking date (ATOM format)
		 */
		datetime: string;
		/**
		 * A chart slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV226ChartAlbumBySlugRankingByDatetimeResponse = ChartAlbumRankCollectionResponse2;

export type GetApiV226ChartAlbumBySlugRankingByDatetimeError = unknown;

export type GetApiV2ChartTiktokMusicWeeklyRankingLatestData = {
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartTiktokMusicWeeklyRankingLatestResponse = TiktokMusicRankCollectionResponse;

export type GetApiV2ChartTiktokMusicWeeklyRankingLatestError = unknown;

export type GetApiV2ChartTiktokMusicWeeklyAvailableRankingsData = {
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartTiktokMusicWeeklyAvailableRankingsResponse =
	AvailableTiktokMusicRankingCollectionResponse;

export type GetApiV2ChartTiktokMusicWeeklyAvailableRankingsError = unknown;

export type GetApiV2ChartTiktokMusicWeeklyRankingByDatetimeData = {
	path: {
		/**
		 * A ranking date (ATOM format)
		 */
		datetime: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ChartTiktokMusicWeeklyRankingByDatetimeResponse =
	TiktokMusicRankCollectionResponse;

export type GetApiV2ChartTiktokMusicWeeklyRankingByDatetimeError = unknown;

export type GetApiV2LibraryArtistData = {
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2LibraryArtistResponse = ArtistIdentifierCollectionResponse2;

export type GetApiV2LibraryArtistError = unknown;

export type PostApiV2LibraryArtistData = {
	/**
	 * JSON Payload
	 */
	body: {
		identifiers?: Array<{
			identifier?: string;
			platformCode?: string;
		}>;
	};
};

export type PostApiV2LibraryArtistResponse = IdentifiersSubmittedResponse;

export type PostApiV2LibraryArtistError = unknown;

export type DeleteApiV2LibraryArtistData = {
	/**
	 * JSON Payload
	 */
	body: {
		identifiers?: Array<{
			identifier?: string;
			platformCode?: string;
		}>;
	};
};

export type DeleteApiV2LibraryArtistResponse = IdentifiersSubmittedResponse;

export type DeleteApiV2LibraryArtistError = unknown;

export type GetApiV2LibrarySongData = {
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2LibrarySongResponse = SongIdentifierCollectionResponse;

export type GetApiV2LibrarySongError = unknown;

export type PostApiV2LibrarySongData = {
	/**
	 * JSON Payload
	 */
	body: {
		identifiers?: Array<{
			identifier?: string;
			platformCode?: string;
		}>;
	};
};

export type PostApiV2LibrarySongResponse = IdentifiersSubmittedResponse;

export type PostApiV2LibrarySongError = unknown;

export type DeleteApiV2LibrarySongData = {
	/**
	 * JSON Payload
	 */
	body: {
		identifiers?: Array<{
			identifier?: string;
			platformCode?: string;
		}>;
	};
};

export type DeleteApiV2LibrarySongResponse = IdentifiersSubmittedResponse;

export type DeleteApiV2LibrarySongError = unknown;

export type GetApiV2PlaylistByUuidData = {
	path: {
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
};

export type GetApiV2PlaylistByUuidResponse = PlaylistResponse;

export type GetApiV2PlaylistByUuidError = unknown;

export type GetApiV28PlaylistByUuidData = {
	path: {
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
};

export type GetApiV28PlaylistByUuidResponse = PlaylistResponse2;

export type GetApiV28PlaylistByUuidError = unknown;

export type GetApiV2PlaylistByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * A playlist identifier
		 */
		identifier: string;
		/**
		 * A playlist platform code
		 */
		platform: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2). Required for apple-music and amazon
		 */
		countryCode?: string;
	};
};

export type GetApiV2PlaylistByPlatformByPlatformByIdentifierResponse = PlaylistResponse;

export type GetApiV2PlaylistByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV28PlaylistByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * A playlist identifier
		 */
		identifier: string;
		/**
		 * A playlist platform code
		 */
		platform: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2). Required for apple-music and amazon
		 */
		countryCode?: string;
	};
};

export type GetApiV28PlaylistByPlatformByPlatformByIdentifierResponse = PlaylistResponse2;

export type GetApiV28PlaylistByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV2PlaylistCuratorsByPlatformData = {
	path: {
		/**
		 * A playlist platform code
		 */
		platform: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2PlaylistCuratorsByPlatformResponse = OwnerCollectionResponse;

export type GetApiV2PlaylistCuratorsByPlatformError = unknown;

export type GetApiV2PlaylistByCuratorByPlatformByCuratorIdentifierData = {
	path: {
		/**
		 * A playlist curator identifier
		 */
		curatorIdentifier: string;
		/**
		 * A playlist platform code
		 */
		platform: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2). Required for apple-music and amazon
		 */
		countryCode?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : audience, name
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV2PlaylistByCuratorByPlatformByCuratorIdentifierResponse =
	PlaylistCollectionResponse;

export type GetApiV2PlaylistByCuratorByPlatformByCuratorIdentifierError = unknown;

export type GetApiV220PlaylistByCuratorByPlatformByCuratorIdentifierData = {
	path: {
		/**
		 * A playlist curator identifier
		 */
		curatorIdentifier: string;
		/**
		 * A playlist platform code
		 */
		platform: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2). Required for apple-music and amazon
		 */
		countryCode?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : audience, name
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV220PlaylistByCuratorByPlatformByCuratorIdentifierResponse =
	PlaylistCollectionResponse2;

export type GetApiV220PlaylistByCuratorByPlatformByCuratorIdentifierError = unknown;

export type GetApiV2PlaylistByTypeByPlatformByTypeData = {
	path: {
		/**
		 * A playlist platform code
		 */
		platform: string;
		/**
		 * A playlist type (algorithmic, charts, curators_listeners, editorial, algotorial, major, radios, this_is.)
		 */
		type: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2). Required for apple-music and amazon
		 */
		countryCode?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : audience, name
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV2PlaylistByTypeByPlatformByTypeResponse = PlaylistCollectionResponse3;

export type GetApiV2PlaylistByTypeByPlatformByTypeError = unknown;

export type GetApiV2PlaylistByUuidAudienceData = {
	path: {
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Period end date (Format YYYY-MM-DD). Example : 2019-01-31
		 */
		endDate?: string;
		/**
		 * Period start date (Format YYYY-MM-DD). Example : 2019-01-31
		 */
		startDate?: string;
	};
};

export type GetApiV2PlaylistByUuidAudienceResponse = AudiencePlotCollectionResponse2;

export type GetApiV2PlaylistByUuidAudienceError = unknown;

export type GetApiV220PlaylistByUuidAudienceData = {
	path: {
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Period end date (Format YYYY-MM-DD). Example : 2019-01-31
		 */
		endDate?: string;
		/**
		 * Period start date (Format YYYY-MM-DD). Example : 2019-01-31
		 */
		startDate?: string;
	};
};

export type GetApiV220PlaylistByUuidAudienceResponse = AudiencePlotCollectionResponse3;

export type GetApiV220PlaylistByUuidAudienceError = unknown;

export type GetApiV220PlaylistByTypeByPlatformByTypeData = {
	path: {
		/**
		 * A playlist platform code
		 */
		platform: string;
		/**
		 * A playlist type (algorithmic, charts, curators_listeners, editorial, algotorial, major, radios, this_is.)
		 */
		type: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2). Required for apple-music and amazon
		 */
		countryCode?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : audience, name
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV220PlaylistByTypeByPlatformByTypeResponse = PlaylistCollectionResponse4;

export type GetApiV220PlaylistByTypeByPlatformByTypeError = unknown;

export type GetApiV2PlaylistByUuidTracksLatestData = {
	path: {
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
};

export type GetApiV2PlaylistByUuidTracksLatestResponse = TrackCollectionResponse3;

export type GetApiV2PlaylistByUuidTracksLatestError = unknown;

export type GetApiV220PlaylistByUuidTracksLatestData = {
	path: {
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
};

export type GetApiV220PlaylistByUuidTracksLatestResponse = TrackCollectionResponse4;

export type GetApiV220PlaylistByUuidTracksLatestError = unknown;

export type GetApiV2PlaylistByUuidAvailableTracklistingsData = {
	path: {
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period filter (YYYY-MM-DD format)
		 */
		endDate?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Number of historical days (max. 90)
		 */
		period?: number;
	};
};

export type GetApiV2PlaylistByUuidAvailableTracklistingsResponse =
	TracklistingDateCollectionResponse;

export type GetApiV2PlaylistByUuidAvailableTracklistingsError = unknown;

export type GetApiV220PlaylistByUuidAvailableTracklistingsData = {
	path: {
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period filter (YYYY-MM-DD format)
		 */
		endDate?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Number of historical days (max. 90)
		 */
		period?: number;
	};
};

export type GetApiV220PlaylistByUuidAvailableTracklistingsResponse =
	TracklistingDateCollectionResponse2;

export type GetApiV220PlaylistByUuidAvailableTracklistingsError = unknown;

export type GetApiV2PlaylistByUuidTracksByDatetimeData = {
	path: {
		/**
		 * A ranking date (ATOM format)
		 */
		datetime: string;
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2PlaylistByUuidTracksByDatetimeResponse = TrackCollectionResponse3;

export type GetApiV2PlaylistByUuidTracksByDatetimeError = unknown;

export type GetApiV220PlaylistByUuidTracksByDatetimeData = {
	path: {
		/**
		 * A ranking date (ATOM format)
		 */
		datetime: string;
		/**
		 * A playlist UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV220PlaylistByUuidTracksByDatetimeResponse = TrackCollectionResponse4;

export type GetApiV220PlaylistByUuidTracksByDatetimeError = unknown;

export type GetApiV2RadioData = {
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2RadioResponse = RadioCollectionResponse;

export type GetApiV2RadioError = unknown;

export type GetApiV218RadioData = {
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV218RadioResponse = RadioCollectionResponse2;

export type GetApiV218RadioError = unknown;

export type GetApiV222RadioData = {
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV222RadioResponse = RadioCollectionResponse3;

export type GetApiV222RadioError = unknown;

export type GetApiV2RadioByCountryByCountryCodeData = {
	path: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2RadioByCountryByCountryCodeResponse = RadioCollectionResponse;

export type GetApiV2RadioByCountryByCountryCodeError = unknown;

export type GetApiV218RadioByCountryByCountryCodeData = {
	path: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV218RadioByCountryByCountryCodeResponse = RadioCollectionResponse2;

export type GetApiV218RadioByCountryByCountryCodeError = unknown;

export type GetApiV222RadioByCountryByCountryCodeData = {
	path: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV222RadioByCountryByCountryCodeResponse = RadioCollectionResponse3;

export type GetApiV222RadioByCountryByCountryCodeError = unknown;

export type GetApiV2RadioBySlugLiveFeedData = {
	path: {
		/**
		 * A radio slug
		 */
		slug: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2RadioBySlugLiveFeedResponse = LiveFeedCollectionResponse;

export type GetApiV2RadioBySlugLiveFeedError = unknown;

export type GetApiV2ReferentialPlatformsResponse = PlatformCollectionResponse;

export type GetApiV2ReferentialPlatformsError = unknown;

export type GetApiV2ReferentialPlatformsSocialResponse = PlatformCollectionResponse;

export type GetApiV2ReferentialPlatformsSocialError = unknown;

export type GetApiV2ReferentialPlatformsStreamingResponse = PlatformCollectionResponse;

export type GetApiV2ReferentialPlatformsStreamingError = unknown;

export type GetApiV2ChartSongPlatformsResponse = PlatformCollectionResponse;

export type GetApiV2ChartSongPlatformsError = unknown;

export type GetApiV2ChartAlbumPlatformsResponse = PlatformCollectionResponse;

export type GetApiV2ChartAlbumPlatformsError = unknown;

export type GetApiV2PlaylistPlatformsResponse = PlatformCollectionResponse;

export type GetApiV2PlaylistPlatformsError = unknown;

export type GetApiV2RadioCountriesData = {
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2RadioCountriesResponse = CountryCollectionResponse;

export type GetApiV2RadioCountriesError = unknown;

export type GetApiV2TopArtistReferentialCitiesByCountryCodeData = {
	path: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Search city filter
		 */
		searchCity?: string;
	};
};

export type GetApiV2TopArtistReferentialCitiesByCountryCodeResponse = CityCollectionResponse;

export type GetApiV2TopArtistReferentialCitiesByCountryCodeError = unknown;

export type GetApiV2ArtistSearchByTermData = {
	path: {
		/**
		 * A name or an identifier
		 */
		term: string;
	};
	query?: {
		/**
		 * Number of results (max. 20)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2ArtistSearchByTermResponse = ArtistCollectionResponse;

export type GetApiV2ArtistSearchByTermError = unknown;

export type GetApiV2SongSearchByTermData = {
	path: {
		/**
		 * A name or an identifier
		 */
		term: string;
	};
	query?: {
		/**
		 * Number of results (max. 20)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2SongSearchByTermResponse = SongCollectionResponse3;

export type GetApiV2SongSearchByTermError = unknown;

export type GetApiV2PlaylistSearchByTermData = {
	path: {
		/**
		 * A name or an identifier
		 */
		term: string;
	};
	query?: {
		/**
		 * Number of results (max. 20)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2PlaylistSearchByTermResponse = PlaylistCollectionResponse3;

export type GetApiV2PlaylistSearchByTermError = unknown;

export type GetApiV2SearchExternalUrlData = {
	query: {
		/**
		 * Url platform encoded
		 */
		platformUrl: string;
	};
};

export type GetApiV2SearchExternalUrlResponse = ResolveExternalUrlResponse;

export type GetApiV2SearchExternalUrlError = unknown;

export type GetApiV2SongByUuidData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
};

export type GetApiV2SongByUuidResponse = SongResponse;

export type GetApiV2SongByUuidError = unknown;

export type GetApiV28SongByUuidData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
};

export type GetApiV28SongByUuidResponse = SongResponse2;

export type GetApiV28SongByUuidError = unknown;

export type GetApiV225SongByUuidData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
};

export type GetApiV225SongByUuidResponse = SongResponse3;

export type GetApiV225SongByUuidError = unknown;

export type GetApiV2SongByIsrcByIsrcData = {
	path: {
		/**
		 * An ISRC code
		 */
		isrc: string;
	};
};

export type GetApiV2SongByIsrcByIsrcResponse = SongResponse;

export type GetApiV2SongByIsrcByIsrcError = unknown;

export type GetApiV28SongByIsrcByIsrcData = {
	path: {
		/**
		 * An ISRC code
		 */
		isrc: string;
	};
};

export type GetApiV28SongByIsrcByIsrcResponse = SongResponse2;

export type GetApiV28SongByIsrcByIsrcError = unknown;

export type GetApiV225SongByIsrcByIsrcData = {
	path: {
		/**
		 * An ISRC code
		 */
		isrc: string;
	};
};

export type GetApiV225SongByIsrcByIsrcResponse = SongResponse3;

export type GetApiV225SongByIsrcByIsrcError = unknown;

export type GetApiV2SongByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * A song platform Identifier.
		 */
		identifier: string;
		/**
		 * A platform code
		 */
		platform: string;
	};
};

export type GetApiV2SongByPlatformByPlatformByIdentifierResponse = SongResponse;

export type GetApiV2SongByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV28SongByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * A song platform Identifier.
		 */
		identifier: string;
		/**
		 * A platform code
		 */
		platform: string;
	};
};

export type GetApiV28SongByPlatformByPlatformByIdentifierResponse = SongResponse2;

export type GetApiV28SongByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV225SongByPlatformByPlatformByIdentifierData = {
	path: {
		/**
		 * A song platform Identifier.
		 */
		identifier: string;
		/**
		 * A platform code
		 */
		platform: string;
	};
};

export type GetApiV225SongByPlatformByPlatformByIdentifierResponse = SongResponse3;

export type GetApiV225SongByPlatformByPlatformByIdentifierError = unknown;

export type GetApiV2SongByUuidIdentifiersData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2SongByUuidIdentifiersResponse = SongIdentifierCollectionResponse2;

export type GetApiV2SongByUuidIdentifiersError = unknown;

export type GetApiV2SongByUuidAlbumsData = {
	path: {
		/**
		 * A song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : title, releaseDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
		/**
		 * Filter result album list. Available values are :all, album, single, compil
		 */
		type?: string;
	};
};

export type GetApiV2SongByUuidAlbumsResponse = AlbumCollectionResponse5;

export type GetApiV2SongByUuidAlbumsError = unknown;

export type GetApiV2SongByUuidTiktokMusicsData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2SongByUuidTiktokMusicsResponse = MusicCollectionResponse;

export type GetApiV2SongByUuidTiktokMusicsError = unknown;

export type GetApiV2SongByUuidYoutubeVideosData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
};

export type GetApiV2SongByUuidYoutubeVideosResponse = VideoCollectionResponse;

export type GetApiV2SongByUuidYoutubeVideosError = unknown;

export type GetApiV216SongByUuidYoutubeVideosData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
};

export type GetApiV216SongByUuidYoutubeVideosResponse = VideoCollectionResponse2;

export type GetApiV216SongByUuidYoutubeVideosError = unknown;

export type GetApiV2SongByUuidAudienceByPlatformData = {
	path: {
		/**
		 * A platform code
		 */
		platform: string;
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional song identifier (example : 2Fxmhks0bxGSBdJ92vM42m)
		 */
		identifier?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidAudienceByPlatformResponse = SongPlotCollectionResponse;

export type GetApiV2SongByUuidAudienceByPlatformError = unknown;

export type GetApiV2SongByUuidSpotifyStreamData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidSpotifyStreamResponse = SongPlotCollectionResponse2;

export type GetApiV2SongByUuidSpotifyStreamError = unknown;

export type GetApiV224SongByUuidSpotifyStreamData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV224SongByUuidSpotifyStreamResponse = SongPlotCollectionResponse;

export type GetApiV224SongByUuidSpotifyStreamError = unknown;

export type GetApiV2SongByUuidYoutubeViewsData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidYoutubeViewsResponse = YoutubeViewsPlotCollectionResponse;

export type GetApiV2SongByUuidYoutubeViewsError = unknown;

export type GetApiV2SongByUuidYoutubeViewsVideoByIdentifierData = {
	path: {
		/**
		 * A YouTube videoID.
		 */
		identifier: string;
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidYoutubeViewsVideoByIdentifierResponse = SongPlotCollectionResponse2;

export type GetApiV2SongByUuidYoutubeViewsVideoByIdentifierError = unknown;

export type GetApiV2SongByUuidShazamCountData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidShazamCountResponse = SongPlotCollectionResponse2;

export type GetApiV2SongByUuidShazamCountError = unknown;

export type GetApiV224SongByUuidShazamCountData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV224SongByUuidShazamCountResponse = SongPlotCollectionResponse;

export type GetApiV224SongByUuidShazamCountError = unknown;

export type GetApiV2SongByUuidSpotifyIdentifierPopularityData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidSpotifyIdentifierPopularityResponse = SongPlotCollectionResponse;

export type GetApiV2SongByUuidSpotifyIdentifierPopularityError = unknown;

export type GetApiV2SongByUuidSpotifyPopularityData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidSpotifyPopularityResponse = SongPlotCollectionResponse2;

export type GetApiV2SongByUuidSpotifyPopularityError = unknown;

export type GetApiV2SongByUuidChartsRanksByPlatformData = {
	path: {
		/**
		 * A song chart platform code
		 */
		platform: string;
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Get only the current positions in charts with 1, or the current and past positions with 0.
		 */
		currentOnly?: number;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, rankDate
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
	};
};

export type GetApiV2SongByUuidChartsRanksByPlatformResponse = RankCollectionResponse4;

export type GetApiV2SongByUuidChartsRanksByPlatformError = unknown;

export type GetApiV2SongByUuidPlaylistCurrentByPlatformData = {
	path: {
		/**
		 * A playlist platform code
		 */
		platform: string;
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, positionDate, entryDate, subscriberCount
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
		/**
		 * A playlist type. Available values are : 'all' or one of editorial, algorithmic, algotorial, major, charts, curators_listeners, radios, this_is
		 */
		type?: string;
	};
};

export type GetApiV2SongByUuidPlaylistCurrentByPlatformResponse = PositionCollectionResponse;

export type GetApiV2SongByUuidPlaylistCurrentByPlatformError = unknown;

export type GetApiV220SongByUuidPlaylistCurrentByPlatformData = {
	path: {
		/**
		 * A playlist platform code
		 */
		platform: string;
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Sort criteria. Available values are : position, positionDate, entryDate, subscriberCount
		 */
		sortBy?: string;
		/**
		 * Sort order. Available values are : asc, desc
		 */
		sortOrder?: string;
		/**
		 * A playlist type. Available values are : 'all' or one of editorial, algorithmic, algotorial, major, charts, curators_listeners, radios, this_is
		 */
		type?: string;
	};
};

export type GetApiV220SongByUuidPlaylistCurrentByPlatformResponse = PositionCollectionResponse2;

export type GetApiV220SongByUuidPlaylistCurrentByPlatformError = unknown;

export type GetApiV2SongByUuidBroadcastsData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode?: string;
		/**
		 * Period end date. You can leave this field empty to get last broadcasts. Example : 2019-01-01T00:00:00Z
		 */
		endDate?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Radio slugs separed with comma. Example : radio-1,radio-2,radio-3
		 */
		radioSlugs?: string;
		/**
		 * Period start date (Format ATOM). Example : 2019-01-01T00:00:00Z
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidBroadcastsResponse = BroadcastCollectionResponse;

export type GetApiV2SongByUuidBroadcastsError = unknown;

export type GetApiV2SongByUuidBroadcastGroupsData = {
	path: {
		/**
		 * A Song UUID
		 */
		uuid: string;
	};
	query?: {
		/**
		 * Country code (2 letters ISO 3166-2, example: 'US', full list on https://en.wikipedia.org/wiki/ISO_3166-2)
		 */
		countryCode?: string;
		/**
		 * Optional period end date (format YYYY-MM-DD), leave empty to use latest 90 days
		 */
		endDate?: string;
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
		/**
		 * Radio slugs separed with comma. Example : radio-1,radio-2,radio-3
		 */
		radioSlugs?: string;
		/**
		 * Optional period start date (format YYYY-MM-DD), period cannot exceed 90 days
		 */
		startDate?: string;
	};
};

export type GetApiV2SongByUuidBroadcastGroupsResponse = BroadcastCollectionResponse;

export type GetApiV2SongByUuidBroadcastGroupsError = unknown;

export type PostApiV2SongByUuidSourcesAddData = {
	/**
	 * JSON Payload
	 */
	body: {
		urls?: Array<string>;
	};
	path: {
		/**
		 * A song UUID
		 */
		uuid: string;
	};
};

export type PostApiV2SongByUuidSourcesAddResponse = SongResponse;

export type PostApiV2SongByUuidSourcesAddError = unknown;

export type GetApiV2TiktokMusicByIdentifierData = {
	path: {
		/**
		 * A music identifier
		 */
		identifier: string;
	};
};

export type GetApiV2TiktokMusicByIdentifierResponse = MusicResponse;

export type GetApiV2TiktokMusicByIdentifierError = unknown;

export type GetApiV2TiktokMusicByIdentifierVideoVolumeData = {
	path: {
		/**
		 * A music identifier
		 */
		identifier: string;
	};
	query?: {
		/**
		 * Optional period filter (YYYY-MM-DD format)
		 */
		endDate?: string;
		/**
		 * Number of historical days (max. 90)
		 */
		period?: number;
	};
};

export type GetApiV2TiktokMusicByIdentifierVideoVolumeResponse = VideoVolumePlotCollectionResponse;

export type GetApiV2TiktokMusicByIdentifierVideoVolumeError = unknown;

export type GetApiV2TiktokMusicByIdentifierVideosData = {
	path: {
		/**
		 * A music identifier
		 */
		identifier: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2TiktokMusicByIdentifierVideosResponse = VideoCollectionResponse3;

export type GetApiV2TiktokMusicByIdentifierVideosError = unknown;

export type GetApiV2TiktokUserByUsernameData = {
	path: {
		/**
		 * A user username
		 */
		username: string;
	};
};

export type GetApiV2TiktokUserByUsernameResponse = UserResponse;

export type GetApiV2TiktokUserByUsernameError = unknown;

export type GetApiV2TiktokUserByUsernameVideosData = {
	path: {
		/**
		 * A user username
		 */
		username: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2TiktokUserByUsernameVideosResponse = UserVideoCollectionResponse;

export type GetApiV2TiktokUserByUsernameVideosError = unknown;

export type GetApiV2TiktokUserByUsernameAudienceData = {
	path: {
		/**
		 * A user username
		 */
		username: string;
	};
	query?: {
		/**
		 * Optional period filter (YYYY-MM-DD format)
		 */
		endDate?: string;
		/**
		 * Number of historical days (max. 90)
		 */
		period?: number;
	};
};

export type GetApiV2TiktokUserByUsernameAudienceResponse = UserAudienceCollectionResponse;

export type GetApiV2TiktokUserByUsernameAudienceError = unknown;

export type GetApiV211TiktokUserByUsernameAudienceData = {
	path: {
		/**
		 * A user username
		 */
		username: string;
	};
	query?: {
		/**
		 * Optional period filter (YYYY-MM-DD format)
		 */
		endDate?: string;
		/**
		 * Number of historical days (max. 90)
		 */
		period?: number;
	};
};

export type GetApiV211TiktokUserByUsernameAudienceResponse = UserAudienceCollectionResponse2;

export type GetApiV211TiktokUserByUsernameAudienceError = unknown;

export type GetApiV2TiktokVideoByIdentifierData = {
	path: {
		/**
		 * A video identifier
		 */
		identifier: string;
	};
};

export type GetApiV2TiktokVideoByIdentifierResponse = VideoResponse;

export type GetApiV2TiktokVideoByIdentifierError = unknown;

export type GetApiV2TiktokVideoByIdentifierAudienceData = {
	path: {
		/**
		 * A video identifier
		 */
		identifier: string;
	};
	query?: {
		/**
		 * Optional period filter (YYYY-MM-DD format)
		 */
		endDate?: string;
		/**
		 * Number of historical days (max. 90)
		 */
		period?: number;
	};
};

export type GetApiV2TiktokVideoByIdentifierAudienceResponse = VideoAudienceCollectionResponse;

export type GetApiV2TiktokVideoByIdentifierAudienceError = unknown;

export type PostApiV2TiktokMusicUrlsAddData = {
	/**
	 * JSON Payload
	 */
	body: {
		urls?: Array<string>;
	};
};

export type PostApiV2TiktokMusicUrlsAddResponse = UrlsSubmittedResponse;

export type PostApiV2TiktokMusicUrlsAddError = unknown;

export type PostApiV2TiktokUserUrlsAddData = {
	/**
	 * JSON Payload
	 */
	body: {
		urls?: Array<string>;
	};
};

export type PostApiV2TiktokUserUrlsAddResponse = UrlsSubmittedResponse;

export type PostApiV2TiktokUserUrlsAddError = unknown;

export type GetApiV2UserByEmailBlocklistArtistsData = {
	path: {
		/**
		 * url encoded email
		 */
		email: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2UserByEmailBlocklistArtistsResponse = ArtistCollectionResponse2;

export type GetApiV2UserByEmailBlocklistArtistsError = unknown;

export type GetApiV2UserByEmailBlocklistSongsData = {
	path: {
		/**
		 * url_encoded email
		 */
		email: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2UserByEmailBlocklistSongsResponse = SongCollectionResponse4;

export type GetApiV2UserByEmailBlocklistSongsError = unknown;

export type GetApiV2UserByEmailBlocklistLabelsData = {
	path: {
		/**
		 * url_encoded email
		 */
		email: string;
	};
	query?: {
		/**
		 * Number of results (max. 100)
		 */
		limit?: number;
		/**
		 * Get results starting from position
		 */
		offset?: number;
	};
};

export type GetApiV2UserByEmailBlocklistLabelsResponse = LabelCollectionResponse;

export type GetApiV2UserByEmailBlocklistLabelsError = unknown;

export type GetApiV2SwaggerJsonResponse = unknown;

export type GetApiV2SwaggerJsonError = unknown;

export type GetApiV2DocJsonResponse = unknown;

export type GetApiV2DocJsonError = unknown;

export type GetApiV2DocResponse = unknown;

export type GetApiV2DocError = unknown;

export type $OpenApiTs = {
	'/api/v2/album/by-uuid/{uuid}': {
		get: {
			req: GetApiV2AlbumByUuidByUuidData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/album/by-slug/{slug}': {
		get: {
			req: GetApiV2AlbumBySlugBySlugData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.15/album/by-slug/{slug}': {
		get: {
			req: GetApiV215AlbumBySlugBySlugData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/album/by-upc/{upc}': {
		get: {
			req: GetApiV2AlbumByUpcByUpcData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.15/album/by-upc/{upc}': {
		get: {
			req: GetApiV215AlbumByUpcByUpcData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse3;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.26/album/by-upc/{upc}': {
		get: {
			req: GetApiV226AlbumByUpcByUpcData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/album/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV2AlbumByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse2;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.15/album/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV215AlbumByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse3;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.26/album/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV226AlbumByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * An Album response
				 */
				'200': AlbumResponse;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.26/album/{uuid}/identifiers': {
		get: {
			req: GetApiV226AlbumByUuidIdentifiersData;
			res: {
				/**
				 * An Identifier collection response
				 */
				'200': AlbumIdentifierCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/album/{slug}/identifiers': {
		get: {
			req: GetApiV2AlbumBySlugIdentifiersData;
			res: {
				/**
				 * An Identifier collection response
				 */
				'200': AlbumIdentifierCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.26/album/{uuid}/tracks': {
		get: {
			req: GetApiV226AlbumByUuidTracksData;
			res: {
				/**
				 * An Album track collection response
				 */
				'200': AlbumTrackCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/album/{slug}/tracks': {
		get: {
			req: GetApiV2AlbumBySlugTracksData;
			res: {
				/**
				 * An Album track collection response
				 */
				'200': AlbumTrackCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.26/album/{uuid}/charts/ranks/{platform}': {
		get: {
			req: GetApiV226AlbumByUuidChartsRanksByPlatformData;
			res: {
				/**
				 * A album rank collection response
				 */
				'200': RankCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/album/{slug}/charts/ranks/{platform}': {
		get: {
			req: GetApiV2AlbumBySlugChartsRanksByPlatformData;
			res: {
				/**
				 * A album rank collection response
				 */
				'200': RankCollectionResponse2;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Album not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}': {
		get: {
			req: GetApiV2ArtistByUuidData;
			res: {
				/**
				 * An Artist response
				 */
				'200': ArtistResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.9/artist/{uuid}': {
		get: {
			req: GetApiV29ArtistByUuidData;
			res: {
				/**
				 * An Artist response
				 */
				'200': ArtistResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV2ArtistByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * An artist response
				 */
				'200': ArtistResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * No artist found for this platform identifier
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.9/artist/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV29ArtistByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * An artist response
				 */
				'200': ArtistResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * No artist found for this platform identifier
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/by-country/{countryCode}': {
		get: {
			req: GetApiV2ArtistByCountryByCountryCodeData;
			res: {
				/**
				 * An artist collection response
				 */
				'200': ArtistCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/identifiers': {
		get: {
			req: GetApiV2ArtistByUuidIdentifiersData;
			res: {
				/**
				 * An Identifier collection response
				 */
				'200': ArtistIdentifierCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/songs': {
		get: {
			req: GetApiV2ArtistByUuidSongsData;
			res: {
				/**
				 * An Artist song collection response
				 */
				'200': SongCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * You are not authorized to perform this operation
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.21/artist/{uuid}/songs': {
		get: {
			req: GetApiV221ArtistByUuidSongsData;
			res: {
				/**
				 * An Artist song collection response
				 */
				'200': SongCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * You are not authorized to perform this operation
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/albums': {
		get: {
			req: GetApiV2ArtistByUuidAlbumsData;
			res: {
				/**
				 * An Artist album collection response
				 */
				'200': AlbumCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.18/artist/{uuid}/albums': {
		get: {
			req: GetApiV218ArtistByUuidAlbumsData;
			res: {
				/**
				 * An Artist album collection response
				 */
				'200': AlbumCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.26/artist/{uuid}/albums': {
		get: {
			req: GetApiV226ArtistByUuidAlbumsData;
			res: {
				/**
				 * An Artist album collection response
				 */
				'200': AlbumCollectionResponse3;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.34/artist/{uuid}/albums': {
		get: {
			req: GetApiV234ArtistByUuidAlbumsData;
			res: {
				/**
				 * An Artist album collection response
				 */
				'200': AlbumCollectionResponse4;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/related': {
		get: {
			req: GetApiV2ArtistByUuidRelatedData;
			res: {
				/**
				 * An Artist Collection response
				 */
				'200': ArtistCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/audience/{platform}': {
		get: {
			req: GetApiV2ArtistByUuidAudienceByPlatformData;
			res: {
				/**
				 * A Social Account response along with its audience plots
				 */
				'200': AudiencePlotCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/social/{platform}/followers/{year}/{month}': {
		get: {
			req: GetApiV2ArtistByUuidSocialByPlatformFollowersByYearByMonthData;
			res: {
				/**
				 * A Social Account response along with its data plots
				 */
				'200': SocialPlotCollectionResponse;
				/**
				 * Invalid date provided
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/social/{platform}': {
		get: {
			req: GetApiV2ArtistByUuidSocialByPlatformData;
			res: {
				/**
				 * A Social Account response along with its data plots
				 */
				'200': SocialPlotCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/streaming/{platform}/listening': {
		get: {
			req: GetApiV2ArtistByUuidStreamingByPlatformListeningData;
			res: {
				/**
				 * Global platform listening audience for a period
				 */
				'200': GlobalAudiencePlotCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/streaming/spotify/listeners': {
		get: {
			req: GetApiV2ArtistByUuidStreamingSpotifyListenersData;
			res: {
				/**
				 * A Streaming Account response with latest Spotify monthly listeners
				 */
				'200': StreamingPlotCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/streaming/spotify/listeners/{year}/{month}': {
		get: {
			req: GetApiV2ArtistByUuidStreamingSpotifyListenersByYearByMonthData;
			res: {
				/**
				 * A Streaming Account response with Spotify monthly listeners
				 */
				'200': StreamingPlotCollectionResponse;
				/**
				 * Invalid date provided
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/streaming/youtube/views': {
		get: {
			req: GetApiV2ArtistByUuidStreamingYoutubeViewsData;
			res: {
				/**
				 * A Streaming Account response with latest YouTube monthly views
				 */
				'200': StreamingPlotCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/streaming/youtube/views/{year}/{month}': {
		get: {
			req: GetApiV2ArtistByUuidStreamingYoutubeViewsByYearByMonthData;
			res: {
				/**
				 * A Streaming Account response with YouTube monthly views
				 */
				'200': StreamingPlotCollectionResponse;
				/**
				 * Invalid date provided
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/{platform}/retention': {
		get: {
			req: GetApiV2ArtistByUuidByPlatformRetentionData;
			res: {
				/**
				 * Retention for a period
				 */
				'200': RetentionPlotCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/spotify/popularity': {
		get: {
			req: GetApiV2ArtistByUuidSpotifyPopularityData;
			res: {
				/**
				 * A Streaming Account response with Spotify popularity for a period
				 */
				'200': PopularityPlotCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/audience/{platform}/report/latest': {
		get: {
			req: GetApiV2ArtistByUuidAudienceByPlatformReportLatestData;
			res: {
				/**
				 * An Artist audience report response
				 */
				'200': AudienceReportResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/audience/{platform}/report/available-dates': {
		get: {
			req: GetApiV2ArtistByUuidAudienceByPlatformReportAvailableDatesData;
			res: {
				/**
				 * An audience report listing dates collection response
				 */
				'200': AudienceReportDateCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/audience/{platform}/report/{date}': {
		get: {
			req: GetApiV2ArtistByUuidAudienceByPlatformReportByDateData;
			res: {
				/**
				 * An Artist audience report response
				 */
				'200': AudienceReportResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/charts/song/ranks/{platform}': {
		get: {
			req: GetApiV2ArtistByUuidChartsSongRanksByPlatformData;
			res: {
				/**
				 * An Artist Chart Song Ranks response
				 */
				'200': RankCollectionResponse3;
				/**
				 * Invalid platform code provided
				 */
				'400': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/charts/album/ranks/{platform}': {
		get: {
			req: GetApiV2ArtistByUuidChartsAlbumRanksByPlatformData;
			res: {
				/**
				 * An Artist Chart Album Ranks response
				 */
				'200': AlbumRankCollectionResponse;
				/**
				 * Invalid platform code provided
				 */
				'400': unknown;
			};
		};
	};
	'/api/v2.28/artist/{uuid}/charts/album/ranks/{platform}': {
		get: {
			req: GetApiV228ArtistByUuidChartsAlbumRanksByPlatformData;
			res: {
				/**
				 * An Artist Chart Album Ranks response
				 */
				'200': AlbumRankCollectionResponse2;
				/**
				 * Invalid platform code provided
				 */
				'400': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/playlist/current/{platform}': {
		get: {
			req: GetApiV2ArtistByUuidPlaylistCurrentByPlatformData;
			res: {
				/**
				 * An Artist Track Collection response
				 */
				'200': TrackCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist Not Found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.20/artist/{uuid}/playlist/current/{platform}': {
		get: {
			req: GetApiV220ArtistByUuidPlaylistCurrentByPlatformData;
			res: {
				/**
				 * An Artist Track Collection response
				 */
				'200': TrackCollectionResponse2;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist Not Found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/broadcasts': {
		get: {
			req: GetApiV2ArtistByUuidBroadcastsData;
			res: {
				/**
				 * A Broadcast Collection response
				 */
				'200': BroadcastCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/songkick/events': {
		get: {
			req: GetApiV2ArtistByUuidSongkickEventsData;
			res: {
				/**
				 * Songkick event collection response
				 */
				'200': EventCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.19/artist/{uuid}/songkick/events': {
		get: {
			req: GetApiV219ArtistByUuidSongkickEventsData;
			res: {
				/**
				 * Songkick event collection response
				 */
				'200': EventCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/artist/{uuid}/sources/add': {
		post: {
			req: PostApiV2ArtistByUuidSourcesAddData;
			res: {
				/**
				 * An Artist response
				 */
				'200': ArtistResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Artist not found
				 */
				'404': unknown;
				/**
				 * Sandbox only. This operation is not allowed on sandbox environment
				 */
				'405': unknown;
			};
		};
	};
	'/api/v2/top-artist/{platform}/{metricType}': {
		get: {
			req: GetApiV2TopArtistByPlatformByMetricTypeData;
			res: {
				/**
				 * A Top Artist response with platform followers/fan/likes/subscribres/plays ... for a period
				 */
				'200': TopArtistCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/top-artist/country/{countryCode}/{platform}/{metricType}': {
		get: {
			req: GetApiV2TopArtistCountryByCountryCodeByPlatformByMetricTypeData;
			res: {
				/**
				 * A Top Artist response with platform followers/fan/likes/subscribres ... for a period
				 */
				'200': TopArtistCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/top-artist/city/{cityKey}/{platform}/{metricType}': {
		get: {
			req: GetApiV2TopArtistCityByCityKeyByPlatformByMetricTypeData;
			res: {
				/**
				 * A Top Artist response with platform followers/fan/likes/subscribres ... for a period
				 */
				'200': TopArtistCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/top-song/{platform}/{metricType}': {
		get: {
			req: GetApiV2TopSongByPlatformByMetricTypeData;
			res: {
				/**
				 * A Top Song response with platform audience, popularity, custom ... for a period
				 */
				'200': TopSongCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/top-radio/{platform}/{metricType}': {
		get: {
			req: GetApiV2TopRadioByPlatformByMetricTypeData;
			res: {
				/**
				 * A Top Radio response with platform followers/fan/likes/subscribres ... for a period
				 */
				'200': TopBroadcastCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/chart/song/by-platform/{platform}': {
		get: {
			req: GetApiV2ChartSongByPlatformByPlatformData;
			res: {
				/**
				 * A Song Chart Collection response
				 */
				'200': ChartCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Platform not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/chart/song/{slug}/ranking/latest': {
		get: {
			req: GetApiV2ChartSongBySlugRankingLatestData;
			res: {
				/**
				 * A Song Chart Rank Collection response
				 */
				'200': ChartSongRankCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.14/chart/song/{slug}/ranking/latest': {
		get: {
			req: GetApiV214ChartSongBySlugRankingLatestData;
			res: {
				/**
				 * A Song Chart Rank Collection response
				 */
				'200': ChartSongRankCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/chart/song/{slug}/available-rankings': {
		get: {
			req: GetApiV2ChartSongBySlugAvailableRankingsData;
			res: {
				/**
				 * A Chart Ranking Dates Collection response
				 */
				'200': AvailableRankingCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/chart/song/{slug}/ranking/{datetime}': {
		get: {
			req: GetApiV2ChartSongBySlugRankingByDatetimeData;
			res: {
				/**
				 * A song chart ranking collection response
				 */
				'200': ChartSongRankCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.14/chart/song/{slug}/ranking/{datetime}': {
		get: {
			req: GetApiV214ChartSongBySlugRankingByDatetimeData;
			res: {
				/**
				 * A song chart ranking collection response
				 */
				'200': ChartSongRankCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/chart/album/by-platform/{platform}': {
		get: {
			req: GetApiV2ChartAlbumByPlatformByPlatformData;
			res: {
				/**
				 * An Album Chart Collection response
				 */
				'200': ChartCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Platform not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/chart/album/{slug}/ranking/latest': {
		get: {
			req: GetApiV2ChartAlbumBySlugRankingLatestData;
			res: {
				/**
				 * An album chart ranking collection response
				 */
				'200': ChartAlbumRankCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.26/chart/album/{slug}/ranking/latest': {
		get: {
			req: GetApiV226ChartAlbumBySlugRankingLatestData;
			res: {
				/**
				 * An album chart ranking collection response
				 */
				'200': ChartAlbumRankCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/chart/album/{slug}/available-rankings': {
		get: {
			req: GetApiV2ChartAlbumBySlugAvailableRankingsData;
			res: {
				/**
				 * A Chart Ranking Dates Collection response
				 */
				'200': AvailableRankingCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/chart/album/{slug}/ranking/{datetime}': {
		get: {
			req: GetApiV2ChartAlbumBySlugRankingByDatetimeData;
			res: {
				/**
				 * An album chart ranking collection response
				 */
				'200': ChartAlbumRankCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.26/chart/album/{slug}/ranking/{datetime}': {
		get: {
			req: GetApiV226ChartAlbumBySlugRankingByDatetimeData;
			res: {
				/**
				 * An album chart ranking collection response
				 */
				'200': ChartAlbumRankCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Chart not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/chart/tiktok/music/weekly/ranking/latest': {
		get: {
			req: GetApiV2ChartTiktokMusicWeeklyRankingLatestData;
			res: {
				/**
				 * A TikTok Rank Collection response
				 */
				'200': TiktokMusicRankCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/chart/tiktok/music/weekly/available-rankings': {
		get: {
			req: GetApiV2ChartTiktokMusicWeeklyAvailableRankingsData;
			res: {
				/**
				 * A TikTok Ranking Dates Collection response
				 */
				'200': AvailableTiktokMusicRankingCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/chart/tiktok/music/weekly/ranking/{datetime}': {
		get: {
			req: GetApiV2ChartTiktokMusicWeeklyRankingByDatetimeData;
			res: {
				/**
				 * A TikTok Rank Collection response
				 */
				'200': TiktokMusicRankCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/library/artist': {
		get: {
			req: GetApiV2LibraryArtistData;
			res: {
				/**
				 * A artist collection response
				 */
				'200': ArtistIdentifierCollectionResponse2;
			};
		};
		post: {
			req: PostApiV2LibraryArtistData;
			res: {
				/**
				 * An IdentifierSubmitted response
				 */
				'200': IdentifiersSubmittedResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
		delete: {
			req: DeleteApiV2LibraryArtistData;
			res: {
				/**
				 * An IdentifierSubmitted response
				 */
				'200': IdentifiersSubmittedResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/library/song': {
		get: {
			req: GetApiV2LibrarySongData;
			res: {
				/**
				 * A artist collection response
				 */
				'200': SongIdentifierCollectionResponse;
			};
		};
		post: {
			req: PostApiV2LibrarySongData;
			res: {
				/**
				 * A SongSubmitted response
				 */
				'200': IdentifiersSubmittedResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
		delete: {
			req: DeleteApiV2LibrarySongData;
			res: {
				/**
				 * A SongSubmitted response
				 */
				'200': IdentifiersSubmittedResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/playlist/{uuid}': {
		get: {
			req: GetApiV2PlaylistByUuidData;
			res: {
				/**
				 * A playlist response
				 */
				'200': PlaylistResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.8/playlist/{uuid}': {
		get: {
			req: GetApiV28PlaylistByUuidData;
			res: {
				/**
				 * A playlist response
				 */
				'200': PlaylistResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/playlist/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV2PlaylistByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * A playlist response
				 */
				'200': PlaylistResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * No playlist found for this platform identifier
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.8/playlist/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV28PlaylistByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * A playlist response
				 */
				'200': PlaylistResponse2;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * No playlist found for this platform identifier
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/playlist/curators/{platform}': {
		get: {
			req: GetApiV2PlaylistCuratorsByPlatformData;
			res: {
				/**
				 * A playlist owner collection response
				 */
				'200': OwnerCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Platform not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/playlist/by-curator/{platform}/{curatorIdentifier}': {
		get: {
			req: GetApiV2PlaylistByCuratorByPlatformByCuratorIdentifierData;
			res: {
				/**
				 * A playlist collection response
				 */
				'200': PlaylistCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Curator not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.20/playlist/by-curator/{platform}/{curatorIdentifier}': {
		get: {
			req: GetApiV220PlaylistByCuratorByPlatformByCuratorIdentifierData;
			res: {
				/**
				 * A playlist collection response
				 */
				'200': PlaylistCollectionResponse2;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Curator not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/playlist/by-type/{platform}/{type}': {
		get: {
			req: GetApiV2PlaylistByTypeByPlatformByTypeData;
			res: {
				/**
				 * A playlist collection response
				 */
				'200': PlaylistCollectionResponse3;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/playlist/{uuid}/audience': {
		get: {
			req: GetApiV2PlaylistByUuidAudienceData;
			res: {
				/**
				 * A playlist audience plots collection
				 */
				'200': AudiencePlotCollectionResponse2;
				/**
				 * Invalid period
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.20/playlist/{uuid}/audience': {
		get: {
			req: GetApiV220PlaylistByUuidAudienceData;
			res: {
				/**
				 * A playlist audience plots collection
				 */
				'200': AudiencePlotCollectionResponse3;
				/**
				 * Invalid period
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.20/playlist/by-type/{platform}/{type}': {
		get: {
			req: GetApiV220PlaylistByTypeByPlatformByTypeData;
			res: {
				/**
				 * A playlist collection response
				 */
				'200': PlaylistCollectionResponse4;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/playlist/{uuid}/tracks/latest': {
		get: {
			req: GetApiV2PlaylistByUuidTracksLatestData;
			res: {
				/**
				 * A playlist track collection response
				 */
				'200': TrackCollectionResponse3;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.20/playlist/{uuid}/tracks/latest': {
		get: {
			req: GetApiV220PlaylistByUuidTracksLatestData;
			res: {
				/**
				 * A playlist track collection response
				 */
				'200': TrackCollectionResponse4;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/playlist/{uuid}/available-tracklistings': {
		get: {
			req: GetApiV2PlaylistByUuidAvailableTracklistingsData;
			res: {
				/**
				 * A playlist track listing dates collection response
				 */
				'200': TracklistingDateCollectionResponse;
				/**
				 * Invalid date provided
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.20/playlist/{uuid}/available-tracklistings': {
		get: {
			req: GetApiV220PlaylistByUuidAvailableTracklistingsData;
			res: {
				/**
				 * A playlist track listing dates collection response
				 */
				'200': TracklistingDateCollectionResponse2;
				/**
				 * Invalid date provided
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/playlist/{uuid}/tracks/{datetime}': {
		get: {
			req: GetApiV2PlaylistByUuidTracksByDatetimeData;
			res: {
				/**
				 * A playlist track collection response
				 */
				'200': TrackCollectionResponse3;
				/**
				 * Invalid date provided
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.20/playlist/{uuid}/tracks/{datetime}': {
		get: {
			req: GetApiV220PlaylistByUuidTracksByDatetimeData;
			res: {
				/**
				 * A playlist track collection response
				 */
				'200': TrackCollectionResponse4;
				/**
				 * Invalid date provided
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Playlist not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/radio': {
		get: {
			req: GetApiV2RadioData;
			res: {
				/**
				 * A radio collection response
				 */
				'200': RadioCollectionResponse;
			};
		};
	};
	'/api/v2.18/radio': {
		get: {
			req: GetApiV218RadioData;
			res: {
				/**
				 * A radio collection response
				 */
				'200': RadioCollectionResponse2;
			};
		};
	};
	'/api/v2.22/radio': {
		get: {
			req: GetApiV222RadioData;
			res: {
				/**
				 * A radio collection response
				 */
				'200': RadioCollectionResponse3;
			};
		};
	};
	'/api/v2/radio/by-country/{countryCode}': {
		get: {
			req: GetApiV2RadioByCountryByCountryCodeData;
			res: {
				/**
				 * A radio collection response
				 */
				'200': RadioCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
			};
		};
	};
	'/api/v2.18/radio/by-country/{countryCode}': {
		get: {
			req: GetApiV218RadioByCountryByCountryCodeData;
			res: {
				/**
				 * A radio collection response
				 */
				'200': RadioCollectionResponse2;
				/**
				 * Invalid request
				 */
				'400': unknown;
			};
		};
	};
	'/api/v2.22/radio/by-country/{countryCode}': {
		get: {
			req: GetApiV222RadioByCountryByCountryCodeData;
			res: {
				/**
				 * A radio collection response
				 */
				'200': RadioCollectionResponse3;
				/**
				 * Invalid request
				 */
				'400': unknown;
			};
		};
	};
	'/api/v2/radio/{slug}/live-feed': {
		get: {
			req: GetApiV2RadioBySlugLiveFeedData;
			res: {
				/**
				 * A live feed collection response
				 */
				'200': LiveFeedCollectionResponse;
			};
		};
	};
	'/api/v2/referential/platforms': {
		get: {
			res: {
				/**
				 * A platform collection response
				 */
				'200': PlatformCollectionResponse;
			};
		};
	};
	'/api/v2/referential/platforms/social': {
		get: {
			res: {
				/**
				 * A social platforms collection response
				 */
				'200': PlatformCollectionResponse;
			};
		};
	};
	'/api/v2/referential/platforms/streaming': {
		get: {
			res: {
				/**
				 * A streaming platforms collection response
				 */
				'200': PlatformCollectionResponse;
			};
		};
	};
	'/api/v2/chart/song/platforms': {
		get: {
			res: {
				/**
				 * A chart song platforms collection response
				 */
				'200': PlatformCollectionResponse;
			};
		};
	};
	'/api/v2/chart/album/platforms': {
		get: {
			res: {
				/**
				 * A chart album platforms collection response
				 */
				'200': PlatformCollectionResponse;
			};
		};
	};
	'/api/v2/playlist/platforms': {
		get: {
			res: {
				/**
				 * A playlist platforms collection response
				 */
				'200': PlatformCollectionResponse;
			};
		};
	};
	'/api/v2/radio/countries': {
		get: {
			req: GetApiV2RadioCountriesData;
			res: {
				/**
				 * A country collection response
				 */
				'200': CountryCollectionResponse;
			};
		};
	};
	'/api/v2/top-artist/referential/cities/{countryCode}': {
		get: {
			req: GetApiV2TopArtistReferentialCitiesByCountryCodeData;
			res: {
				/**
				 * A City ranking collection response
				 */
				'200': CityCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
			};
		};
	};
	'/api/v2/artist/search/{term}': {
		get: {
			req: GetApiV2ArtistSearchByTermData;
			res: {
				/**
				 * An artist collection response with the 20 most pertinent artists
				 */
				'200': ArtistCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * No artist found for this term
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/search/{term}': {
		get: {
			req: GetApiV2SongSearchByTermData;
			res: {
				/**
				 * A song collection response with the 20 most pertinent songs
				 */
				'200': SongCollectionResponse3;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * No song found for this term
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/playlist/search/{term}': {
		get: {
			req: GetApiV2PlaylistSearchByTermData;
			res: {
				/**
				 * A playlist collection response with the 20 most pertinent playlists
				 */
				'200': PlaylistCollectionResponse3;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * No song found for this term
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/search/external/url': {
		get: {
			req: GetApiV2SearchExternalUrlData;
			res: {
				/**
				 * Get Soundcharts URL using a platform URL
				 */
				'200': ResolveExternalUrlResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * No Soundcharts url found for this platform url
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}': {
		get: {
			req: GetApiV2SongByUuidData;
			res: {
				/**
				 * A Song response
				 */
				'200': SongResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.8/song/{uuid}': {
		get: {
			req: GetApiV28SongByUuidData;
			res: {
				/**
				 * A Song response
				 */
				'200': SongResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.25/song/{uuid}': {
		get: {
			req: GetApiV225SongByUuidData;
			res: {
				/**
				 * A Song response
				 */
				'200': SongResponse3;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/by-isrc/{isrc}': {
		get: {
			req: GetApiV2SongByIsrcByIsrcData;
			res: {
				/**
				 * A song response
				 */
				'200': SongResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
				/**
				 * ISRC Blacklisted due to multiple tracks identified from DSP
				 */
				'410': unknown;
			};
		};
	};
	'/api/v2.8/song/by-isrc/{isrc}': {
		get: {
			req: GetApiV28SongByIsrcByIsrcData;
			res: {
				/**
				 * A song response
				 */
				'200': SongResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
				/**
				 * ISRC Blacklisted due to multiple tracks identified from DSP
				 */
				'410': unknown;
			};
		};
	};
	'/api/v2.25/song/by-isrc/{isrc}': {
		get: {
			req: GetApiV225SongByIsrcByIsrcData;
			res: {
				/**
				 * A song response
				 */
				'200': SongResponse3;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
				/**
				 * ISRC Blacklisted due to multiple tracks identified from DSP
				 */
				'410': unknown;
			};
		};
	};
	'/api/v2/song/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV2SongByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * A song response
				 */
				'200': SongResponse;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
				/**
				 * ISRC Blacklisted due to multiple tracks identified from DSP
				 */
				'410': unknown;
			};
		};
	};
	'/api/v2.8/song/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV28SongByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * A song response
				 */
				'200': SongResponse2;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
				/**
				 * ISRC Blacklisted due to multiple tracks identified from DSP
				 */
				'410': unknown;
			};
		};
	};
	'/api/v2.25/song/by-platform/{platform}/{identifier}': {
		get: {
			req: GetApiV225SongByPlatformByPlatformByIdentifierData;
			res: {
				/**
				 * A song response
				 */
				'200': SongResponse3;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
				/**
				 * ISRC Blacklisted due to multiple tracks identified from DSP
				 */
				'410': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/identifiers': {
		get: {
			req: GetApiV2SongByUuidIdentifiersData;
			res: {
				/**
				 * An Identifier collection response
				 */
				'200': SongIdentifierCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/albums': {
		get: {
			req: GetApiV2SongByUuidAlbumsData;
			res: {
				/**
				 * An song album collection response
				 */
				'200': AlbumCollectionResponse5;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/tiktok/musics': {
		get: {
			req: GetApiV2SongByUuidTiktokMusicsData;
			res: {
				/**
				 * A TikTok music collection response
				 */
				'200': MusicCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/youtube/videos': {
		get: {
			req: GetApiV2SongByUuidYoutubeVideosData;
			res: {
				/**
				 * A song response with YouTube videos
				 */
				'200': VideoCollectionResponse;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.16/song/{uuid}/youtube/videos': {
		get: {
			req: GetApiV216SongByUuidYoutubeVideosData;
			res: {
				/**
				 * A song response with YouTube videos
				 */
				'200': VideoCollectionResponse2;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/audience/{platform}': {
		get: {
			req: GetApiV2SongByUuidAudienceByPlatformData;
			res: {
				/**
				 * A song response with platform stream for a period
				 */
				'200': SongPlotCollectionResponse;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/spotify/stream': {
		get: {
			req: GetApiV2SongByUuidSpotifyStreamData;
			res: {
				/**
				 * A song response with Spotify stream for a period
				 */
				'200': SongPlotCollectionResponse2;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.24/song/{uuid}/spotify/stream': {
		get: {
			req: GetApiV224SongByUuidSpotifyStreamData;
			res: {
				/**
				 * A song response with Spotify stream for a period
				 */
				'200': SongPlotCollectionResponse;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/youtube/views': {
		get: {
			req: GetApiV2SongByUuidYoutubeViewsData;
			res: {
				/**
				 * A song response with YouTube views for a period
				 */
				'200': YoutubeViewsPlotCollectionResponse;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/youtube/views/video/{identifier}': {
		get: {
			req: GetApiV2SongByUuidYoutubeViewsVideoByIdentifierData;
			res: {
				/**
				 * A song response with YouTube views by video id for a period
				 */
				'200': SongPlotCollectionResponse2;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/shazam/count': {
		get: {
			req: GetApiV2SongByUuidShazamCountData;
			res: {
				/**
				 * A song response with shazam count for a period
				 */
				'200': SongPlotCollectionResponse2;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.24/song/{uuid}/shazam/count': {
		get: {
			req: GetApiV224SongByUuidShazamCountData;
			res: {
				/**
				 * A song response with shazam count for a period
				 */
				'200': SongPlotCollectionResponse;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/spotify/identifier/popularity': {
		get: {
			req: GetApiV2SongByUuidSpotifyIdentifierPopularityData;
			res: {
				/**
				 * A song response with Spotify popularity for a period
				 */
				'200': SongPlotCollectionResponse;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/spotify/popularity': {
		get: {
			req: GetApiV2SongByUuidSpotifyPopularityData;
			res: {
				/**
				 * A song response with Spotify popularity for a period
				 */
				'200': SongPlotCollectionResponse2;
				/**
				 * Invalid platform code
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/charts/ranks/{platform}': {
		get: {
			req: GetApiV2SongByUuidChartsRanksByPlatformData;
			res: {
				/**
				 * A song rank collection response
				 */
				'200': RankCollectionResponse4;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/playlist/current/{platform}': {
		get: {
			req: GetApiV2SongByUuidPlaylistCurrentByPlatformData;
			res: {
				/**
				 * A song playlist position collection response
				 */
				'200': PositionCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.20/song/{uuid}/playlist/current/{platform}': {
		get: {
			req: GetApiV220SongByUuidPlaylistCurrentByPlatformData;
			res: {
				/**
				 * A song playlist position collection response
				 */
				'200': PositionCollectionResponse2;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/broadcasts': {
		get: {
			req: GetApiV2SongByUuidBroadcastsData;
			res: {
				/**
				 * A Broadcast Collection response
				 */
				'200': BroadcastCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/broadcast-groups': {
		get: {
			req: GetApiV2SongByUuidBroadcastGroupsData;
			res: {
				/**
				 * A Broadcast Collection response
				 */
				'200': BroadcastCollectionResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/song/{uuid}/sources/add': {
		post: {
			req: PostApiV2SongByUuidSourcesAddData;
			res: {
				/**
				 * An Song response
				 */
				'200': SongResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Song not found
				 */
				'404': unknown;
				/**
				 * Sandbox only. This operation is not allowed on sandbox environment
				 */
				'405': unknown;
			};
		};
	};
	'/api/v2/tiktok/music/{identifier}': {
		get: {
			req: GetApiV2TiktokMusicByIdentifierData;
			res: {
				/**
				 * A Music response
				 */
				'200': MusicResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Music not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/tiktok/music/{identifier}/video/volume': {
		get: {
			req: GetApiV2TiktokMusicByIdentifierVideoVolumeData;
			res: {
				/**
				 * A music videos volume plots collection
				 */
				'200': VideoVolumePlotCollectionResponse;
				/**
				 * Invalid period
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Music not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/tiktok/music/{identifier}/videos': {
		get: {
			req: GetApiV2TiktokMusicByIdentifierVideosData;
			res: {
				/**
				 * A music videos collection
				 */
				'200': VideoCollectionResponse3;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Music not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/tiktok/user/{username}': {
		get: {
			req: GetApiV2TiktokUserByUsernameData;
			res: {
				/**
				 * A User response
				 */
				'200': UserResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * User not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/tiktok/user/{username}/videos': {
		get: {
			req: GetApiV2TiktokUserByUsernameVideosData;
			res: {
				/**
				 * A videos collection by user
				 */
				'200': UserVideoCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * User not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/tiktok/user/{username}/audience': {
		get: {
			req: GetApiV2TiktokUserByUsernameAudienceData;
			res: {
				/**
				 * A user audience collection
				 */
				'200': UserAudienceCollectionResponse;
				/**
				 * Invalid period
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * User not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2.11/tiktok/user/{username}/audience': {
		get: {
			req: GetApiV211TiktokUserByUsernameAudienceData;
			res: {
				/**
				 * A user audience collection
				 */
				'200': UserAudienceCollectionResponse2;
				/**
				 * Invalid period
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * User not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/tiktok/video/{identifier}': {
		get: {
			req: GetApiV2TiktokVideoByIdentifierData;
			res: {
				/**
				 * A Video response
				 */
				'200': VideoResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Video not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/tiktok/video/{identifier}/audience': {
		get: {
			req: GetApiV2TiktokVideoByIdentifierAudienceData;
			res: {
				/**
				 * A video audience collection
				 */
				'200': VideoAudienceCollectionResponse;
				/**
				 * Invalid period
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Video not found
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/tiktok/music/urls/add': {
		post: {
			req: PostApiV2TiktokMusicUrlsAddData;
			res: {
				/**
				 * An UrlsSubmitted response
				 */
				'200': UrlsSubmittedResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Sandbox only. This operation is not allowed on sandbox environment
				 */
				'405': unknown;
			};
		};
	};
	'/api/v2/tiktok/user/urls/add': {
		post: {
			req: PostApiV2TiktokUserUrlsAddData;
			res: {
				/**
				 * An UrlsSubmitted response
				 */
				'200': UrlsSubmittedResponse;
				/**
				 * Invalid request
				 */
				'400': unknown;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * Sandbox only. This operation is not allowed on sandbox environment
				 */
				'405': unknown;
			};
		};
	};
	'/api/v2/user/{email}/blocklist/artists': {
		get: {
			req: GetApiV2UserByEmailBlocklistArtistsData;
			res: {
				/**
				 * A Blocklist Artist Collection response
				 */
				'200': ArtistCollectionResponse2;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * User not found in the team
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/user/{email}/blocklist/songs': {
		get: {
			req: GetApiV2UserByEmailBlocklistSongsData;
			res: {
				/**
				 * A Blocklist Song Collection response
				 */
				'200': SongCollectionResponse4;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * User not found in the team
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/user/{email}/blocklist/labels': {
		get: {
			req: GetApiV2UserByEmailBlocklistLabelsData;
			res: {
				/**
				 * A Blocklist Label Collection response
				 */
				'200': LabelCollectionResponse;
				/**
				 * You are not logged in
				 */
				'401': unknown;
				/**
				 * This endpoint is not included in your current plan, reach out to help@soundcharts.com if you want access.
				 */
				'403': unknown;
				/**
				 * User not found in the team
				 */
				'404': unknown;
			};
		};
	};
	'/api/v2/swagger.json': {
		get: {
			res: {
				default: unknown;
			};
		};
	};
	'/api/v2/doc.json': {
		get: {
			res: {
				default: unknown;
			};
		};
	};
	'/api/v2/doc': {
		get: {
			res: {
				default: unknown;
			};
		};
	};
};
