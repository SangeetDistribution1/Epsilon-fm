// This file is auto-generated by @hey-api/openapi-ts

export type ArtistCreate = {
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	/**
	 * Soundcharts Artist UUID associated with the artist
	 */
	soundcharts_artist_id?: string;
	email: string;
	/**
	 * Artist Biography
	 */
	biography: string;
	/**
	 * Artist Apple URL
	 */
	apple_artist_link?: string;
	/**
	 * Artist Beatport URL
	 */
	beatport_artist_link?: string;
	/**
	 * Artist Deezer URL
	 */
	deezer_artist_link?: string;
	/**
	 * Artist Tidal URL
	 */
	tidal_artist_link?: string;
	/**
	 * Artist Pandora URL
	 */
	pandora_artist_link?: string;
	/**
	 * Artist Shazam URL
	 */
	shazam_artist_link?: string;
	/**
	 * Artist Spotify URI
	 */
	spotify_artist_link?: string;
	/**
	 * Artist YouTube URL
	 */
	youtube_channel_link?: string;
	/**
	 * Artist Instagram URL
	 */
	instagram_profile_link?: string;
	/**
	 * Artist Facebook URL
	 */
	facebook_profile_link?: string;
	/**
	 * Artist X URL
	 */
	x_profile_link?: string;
	/**
	 * Artist TikTok URL
	 */
	tiktok_profile_link?: string;
	/**
	 * Artist SoundCloud URL
	 */
	soundcloud_profile_link?: string;
	/**
	 * Artist SongKick URL
	 */
	songkick_profile_link?: string;
	/**
	 * Artist BandsInTown URL
	 */
	bandsintown_profile_link?: string;
};

export type ArtistRead = {
	/**
	 * Timestamp for the creation of the record
	 */
	created_at?: string | null;
	/**
	 * Timestamp for the last update of the record
	 */
	updated_at?: string | null;
	/**
	 * Organization ID associated with the artist
	 */
	org_id: string;
	/**
	 * Unique identifier (UUID) for the record
	 */
	id?: string;
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	/**
	 * Soundcharts Artist UUID associated with the artist
	 */
	soundcharts_artist_id?: string;
	email: string;
	/**
	 * Artist Biography
	 */
	biography: string;
	/**
	 * Artist Apple URL
	 */
	apple_artist_link?: string;
	/**
	 * Artist Beatport URL
	 */
	beatport_artist_link?: string;
	/**
	 * Artist Deezer URL
	 */
	deezer_artist_link?: string;
	/**
	 * Artist Tidal URL
	 */
	tidal_artist_link?: string;
	/**
	 * Artist Pandora URL
	 */
	pandora_artist_link?: string;
	/**
	 * Artist Shazam URL
	 */
	shazam_artist_link?: string;
	/**
	 * Artist Spotify URI
	 */
	spotify_artist_link?: string;
	/**
	 * Artist YouTube URL
	 */
	youtube_channel_link?: string;
	/**
	 * Artist Instagram URL
	 */
	instagram_profile_link?: string;
	/**
	 * Artist Facebook URL
	 */
	facebook_profile_link?: string;
	/**
	 * Artist X URL
	 */
	x_profile_link?: string;
	/**
	 * Artist TikTok URL
	 */
	tiktok_profile_link?: string;
	/**
	 * Artist SoundCloud URL
	 */
	soundcloud_profile_link?: string;
	/**
	 * Artist SongKick URL
	 */
	songkick_profile_link?: string;
	/**
	 * Artist BandsInTown URL
	 */
	bandsintown_profile_link?: string;
};

export type ArtistUpdate = {
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	/**
	 * Soundcharts Artist UUID associated with the artist
	 */
	soundcharts_artist_id?: string | null;
	email?: string | null;
	/**
	 * Artist Biography
	 */
	biography?: string | null;
	/**
	 * Artist Apple URL
	 */
	apple_artist_link?: string | null;
	/**
	 * Artist Beatport URL
	 */
	beatport_artist_link?: string | null;
	/**
	 * Artist Deezer URL
	 */
	deezer_artist_link?: string | null;
	/**
	 * Artist Tidal URL
	 */
	tidal_artist_link?: string | null;
	/**
	 * Artist Pandora URL
	 */
	pandora_artist_link?: string | null;
	/**
	 * Artist Shazam URL
	 */
	shazam_artist_link?: string | null;
	/**
	 * Artist Spotify URI
	 */
	spotify_artist_link?: string | null;
	/**
	 * Artist YouTube URL
	 */
	youtube_channel_link?: string | null;
	/**
	 * Artist Instagram URL
	 */
	instagram_profile_link?: string | null;
	/**
	 * Artist Facebook URL
	 */
	facebook_profile_link?: string | null;
	/**
	 * Artist X URL
	 */
	x_profile_link?: string | null;
	/**
	 * Artist TikTok URL
	 */
	tiktok_profile_link?: string | null;
	/**
	 * Artist SoundCloud URL
	 */
	soundcloud_profile_link?: string | null;
	/**
	 * Artist SongKick URL
	 */
	songkick_profile_link?: string | null;
	/**
	 * Artist BandsInTown URL
	 */
	bandsintown_profile_link?: string | null;
};

export type Body_login_for_access_token_v1_system_auth_login_post = {
	grant_type: string;
	username: string;
	password: string;
	scope?: string;
	client_id?: string | null;
	client_secret?: string | null;
};

export type GenreCreate = {
	/**
	 * Genre Name
	 */
	genre_name: string;
};

export type GenreUpdate = {
	/**
	 * Genre Name
	 */
	genre_name?: string | null;
};

export type HTTPValidationError = {
	detail?: Array<ValidationError>;
};

export type LabelCreate = {
	/**
	 * Label Name
	 */
	label_name: string;
	/**
	 * Label Email
	 */
	email: string;
	/**
	 * Label Biography
	 */
	biography: string;
	/**
	 * Year the label was established
	 */
	established_year: number;
};

export type LabelUpdate = {
	/**
	 * Label Name
	 */
	label_name?: string | null;
	/**
	 * Label Email
	 */
	email?: string | null;
	/**
	 * Label Biography
	 */
	biography?: string | null;
	/**
	 * Year the label was established
	 */
	established_year?: number | null;
};

export type ReleaseCreate = {
	/**
	 * Release Name
	 */
	release_name: string;
};

export type ReleaseUpdate = {
	/**
	 * Release Name
	 */
	release_name?: string | null;
};

export type SubgenreCreate = {
	/**
	 * Subgenre Name
	 */
	subgenre_name: string;
};

export type SubgenreUpdate = {
	/**
	 * Subgenre Name
	 */
	subgenre_name?: string | null;
};

export type Token = {
	access_token: string;
	token_type: string;
};

export type TrackCreate = {
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	/**
	 * Track ISRC
	 */
	isrc: string;
	/**
	 * Track ISWC
	 */
	iswc: string;
	/**
	 * Track Name
	 */
	track_name: string;
	/**
	 * Track Version
	 */
	track_version: string;
	/**
	 * Track Birthdate
	 */
	birthdate: Date;
	/**
	 * Track Phone Number
	 */
	phone: string;
	/**
	 * Track Birth Location
	 */
	birth_location: string;
	/**
	 * Track Current Location
	 */
	current_location: string;
	/**
	 * Track Biography
	 */
	track_biography: string;
	/**
	 * Track Website
	 */
	track_website: string;
	/**
	 * Track Spotify URI
	 */
	spotify_uri: string;
	/**
	 * Track Apple Music URI
	 */
	apple_music_uri: string;
	/**
	 * Track YouTube URL
	 */
	youtube_url: string;
	/**
	 * Primary Genre ID
	 */
	primary_genre_id: string;
	/**
	 * Primary Subgenre ID
	 */
	primary_subgenre_id: string;
};

export type TrackUpdate = {
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	/**
	 * Track ISRC
	 */
	isrc?: string | null;
	/**
	 * Track ISWC
	 */
	iswc?: string | null;
	/**
	 * Track Name
	 */
	track_name?: string | null;
	/**
	 * Track Version
	 */
	track_version?: string | null;
	/**
	 * Track Birthdate
	 */
	birthdate?: Date | null;
	/**
	 * Track Phone Number
	 */
	phone?: string | null;
	/**
	 * Track Birth Location
	 */
	birth_location?: string | null;
	/**
	 * Track Current Location
	 */
	current_location?: string | null;
	/**
	 * Track Biography
	 */
	track_biography?: string | null;
	/**
	 * Track Website
	 */
	track_website?: string | null;
	/**
	 * Track Spotify URI
	 */
	spotify_uri?: string | null;
	/**
	 * Track Apple Music URI
	 */
	apple_music_uri?: string | null;
	/**
	 * Track YouTube URL
	 */
	youtube_url?: string | null;
	/**
	 * Primary Genre ID
	 */
	primary_genre_id?: string | null;
	/**
	 * Primary Subgenre ID
	 */
	primary_subgenre_id?: string | null;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type LoginForAccessTokenV1SystemAuthLoginPostData = {
	body: Body_login_for_access_token_v1_system_auth_login_post;
};

export type LoginForAccessTokenV1SystemAuthLoginPostResponse = Token;

export type LoginForAccessTokenV1SystemAuthLoginPostError = HTTPValidationError;

export type RefreshAccessTokenV1SystemAuthRefreshPostResponse = {
	[key: string]: string;
};

export type RefreshAccessTokenV1SystemAuthRefreshPostError = unknown;

export type LogoutV1SystemAuthLogoutPostResponse = {
	[key: string]: string;
};

export type LogoutV1SystemAuthLogoutPostError = unknown;

export type EndpointV1ArtistsPostData = {
	body: ArtistCreate;
};

export type EndpointV1ArtistsPostResponse = unknown;

export type EndpointV1ArtistsPostError = HTTPValidationError;

export type EndpointV1ArtistsGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number | null;
		/**
		 * Page number
		 */
		page?: number | null;
	};
};

export type EndpointV1ArtistsGetResponse = unknown;

export type EndpointV1ArtistsGetError = HTTPValidationError;

export type ReadArtistV1ArtistsOrgIdGetData = {
	path: {
		org_id: string;
	};
};

export type ReadArtistV1ArtistsOrgIdGetResponse = ArtistRead;

export type ReadArtistV1ArtistsOrgIdGetError = HTTPValidationError;

export type EndpointV1ArtistsOrgIdIdGetData = {
	path: {
		id: string;
		org_id: string;
	};
};

export type EndpointV1ArtistsOrgIdIdGetResponse = unknown;

export type EndpointV1ArtistsOrgIdIdGetError = HTTPValidationError;

export type EndpointV1ArtistsOrgIdIdPatchData = {
	body: ArtistUpdate;
	path: {
		id: string;
		org_id: string;
	};
};

export type EndpointV1ArtistsOrgIdIdPatchResponse = unknown;

export type EndpointV1ArtistsOrgIdIdPatchError = HTTPValidationError;

export type EndpointV1ArtistsOrgIdIdDeleteData = {
	path: {
		id: string;
		org_id: string;
	};
};

export type EndpointV1ArtistsOrgIdIdDeleteResponse = unknown;

export type EndpointV1ArtistsOrgIdIdDeleteError = HTTPValidationError;

export type EndpointV1TracksPostData = {
	body: TrackCreate;
};

export type EndpointV1TracksPostResponse = unknown;

export type EndpointV1TracksPostError = HTTPValidationError;

export type EndpointV1TracksGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number | null;
		/**
		 * Page number
		 */
		page?: number | null;
	};
};

export type EndpointV1TracksGetResponse = unknown;

export type EndpointV1TracksGetError = HTTPValidationError;

export type EndpointV1TracksIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1TracksIdGetResponse = unknown;

export type EndpointV1TracksIdGetError = HTTPValidationError;

export type EndpointV1TracksIdPatchData = {
	body: TrackUpdate;
	path: {
		id: string;
	};
};

export type EndpointV1TracksIdPatchResponse = unknown;

export type EndpointV1TracksIdPatchError = HTTPValidationError;

export type EndpointV1TracksIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1TracksIdDeleteResponse = unknown;

export type EndpointV1TracksIdDeleteError = HTTPValidationError;

export type EndpointV1GenresPostData = {
	body: GenreCreate;
};

export type EndpointV1GenresPostResponse = unknown;

export type EndpointV1GenresPostError = HTTPValidationError;

export type EndpointV1GenresGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number | null;
		/**
		 * Page number
		 */
		page?: number | null;
	};
};

export type EndpointV1GenresGetResponse = unknown;

export type EndpointV1GenresGetError = HTTPValidationError;

export type EndpointV1GenresIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1GenresIdGetResponse = unknown;

export type EndpointV1GenresIdGetError = HTTPValidationError;

export type EndpointV1GenresIdPatchData = {
	body: GenreUpdate;
	path: {
		id: string;
	};
};

export type EndpointV1GenresIdPatchResponse = unknown;

export type EndpointV1GenresIdPatchError = HTTPValidationError;

export type EndpointV1GenresIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1GenresIdDeleteResponse = unknown;

export type EndpointV1GenresIdDeleteError = HTTPValidationError;

export type EndpointV1SubgenresPostData = {
	body: SubgenreCreate;
};

export type EndpointV1SubgenresPostResponse = unknown;

export type EndpointV1SubgenresPostError = HTTPValidationError;

export type EndpointV1SubgenresGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number | null;
		/**
		 * Page number
		 */
		page?: number | null;
	};
};

export type EndpointV1SubgenresGetResponse = unknown;

export type EndpointV1SubgenresGetError = HTTPValidationError;

export type EndpointV1SubgenresIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1SubgenresIdGetResponse = unknown;

export type EndpointV1SubgenresIdGetError = HTTPValidationError;

export type EndpointV1SubgenresIdPatchData = {
	body: SubgenreUpdate;
	path: {
		id: string;
	};
};

export type EndpointV1SubgenresIdPatchResponse = unknown;

export type EndpointV1SubgenresIdPatchError = HTTPValidationError;

export type EndpointV1SubgenresIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1SubgenresIdDeleteResponse = unknown;

export type EndpointV1SubgenresIdDeleteError = HTTPValidationError;

export type EndpointV1ReleasesPostData = {
	body: ReleaseCreate;
};

export type EndpointV1ReleasesPostResponse = unknown;

export type EndpointV1ReleasesPostError = HTTPValidationError;

export type EndpointV1ReleasesGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number | null;
		/**
		 * Page number
		 */
		page?: number | null;
	};
};

export type EndpointV1ReleasesGetResponse = unknown;

export type EndpointV1ReleasesGetError = HTTPValidationError;

export type EndpointV1ReleasesIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1ReleasesIdGetResponse = unknown;

export type EndpointV1ReleasesIdGetError = HTTPValidationError;

export type EndpointV1ReleasesIdPatchData = {
	body: ReleaseUpdate;
	path: {
		id: string;
	};
};

export type EndpointV1ReleasesIdPatchResponse = unknown;

export type EndpointV1ReleasesIdPatchError = HTTPValidationError;

export type EndpointV1ReleasesIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1ReleasesIdDeleteResponse = unknown;

export type EndpointV1ReleasesIdDeleteError = HTTPValidationError;

export type EndpointV1LabelsPostData = {
	body: LabelCreate;
};

export type EndpointV1LabelsPostResponse = unknown;

export type EndpointV1LabelsPostError = HTTPValidationError;

export type EndpointV1LabelsGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number | null;
		/**
		 * Page number
		 */
		page?: number | null;
	};
};

export type EndpointV1LabelsGetResponse = unknown;

export type EndpointV1LabelsGetError = HTTPValidationError;

export type EndpointV1LabelsIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1LabelsIdGetResponse = unknown;

export type EndpointV1LabelsIdGetError = HTTPValidationError;

export type EndpointV1LabelsIdPatchData = {
	body: LabelUpdate;
	path: {
		id: string;
	};
};

export type EndpointV1LabelsIdPatchResponse = unknown;

export type EndpointV1LabelsIdPatchError = HTTPValidationError;

export type EndpointV1LabelsIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1LabelsIdDeleteResponse = unknown;

export type EndpointV1LabelsIdDeleteError = HTTPValidationError;

export type $OpenApiTs = {
	'/v1/system/auth/login': {
		post: {
			req: LoginForAccessTokenV1SystemAuthLoginPostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': Token;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/system/auth/refresh': {
		post: {
			res: {
				/**
				 * Successful Response
				 */
				'200': {
					[key: string]: string;
				};
			};
		};
	};
	'/v1/system/auth/logout': {
		post: {
			res: {
				/**
				 * Successful Response
				 */
				'200': {
					[key: string]: string;
				};
			};
		};
	};
	'/v1/artists': {
		post: {
			req: EndpointV1ArtistsPostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		get: {
			req: EndpointV1ArtistsGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/artists/{org_id}': {
		get: {
			req: ReadArtistV1ArtistsOrgIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': ArtistRead;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/artists/{org_id}/{id}': {
		get: {
			req: EndpointV1ArtistsOrgIdIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		patch: {
			req: EndpointV1ArtistsOrgIdIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		delete: {
			req: EndpointV1ArtistsOrgIdIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/tracks': {
		post: {
			req: EndpointV1TracksPostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		get: {
			req: EndpointV1TracksGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/tracks/{id}': {
		get: {
			req: EndpointV1TracksIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		patch: {
			req: EndpointV1TracksIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		delete: {
			req: EndpointV1TracksIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/genres': {
		post: {
			req: EndpointV1GenresPostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		get: {
			req: EndpointV1GenresGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/genres/{id}': {
		get: {
			req: EndpointV1GenresIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		patch: {
			req: EndpointV1GenresIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		delete: {
			req: EndpointV1GenresIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/subgenres': {
		post: {
			req: EndpointV1SubgenresPostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		get: {
			req: EndpointV1SubgenresGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/subgenres/{id}': {
		get: {
			req: EndpointV1SubgenresIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		patch: {
			req: EndpointV1SubgenresIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		delete: {
			req: EndpointV1SubgenresIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/releases': {
		post: {
			req: EndpointV1ReleasesPostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		get: {
			req: EndpointV1ReleasesGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/releases/{id}': {
		get: {
			req: EndpointV1ReleasesIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		patch: {
			req: EndpointV1ReleasesIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		delete: {
			req: EndpointV1ReleasesIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/labels': {
		post: {
			req: EndpointV1LabelsPostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		get: {
			req: EndpointV1LabelsGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/labels/{id}': {
		get: {
			req: EndpointV1LabelsIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		patch: {
			req: EndpointV1LabelsIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
		delete: {
			req: EndpointV1LabelsIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
};
